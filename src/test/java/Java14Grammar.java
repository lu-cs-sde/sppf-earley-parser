import se.lth.sep.*;

class Java14Grammar {
	public static Category t_error = new Category("error", /*terminal*/ true);
	public static Category t_LBRACE = new Category("LBRACE", /*terminal*/ true);
	public static Category t_SEMICOLON = new Category("SEMICOLON", /*terminal*/ true);
	public static Category t_RBRACE = new Category("RBRACE", /*terminal*/ true);
	public static Category t_NULL_LITERAL = new Category("NULL_LITERAL", /*terminal*/ true);
	public static Category t_STRING_LITERAL = new Category("STRING_LITERAL", /*terminal*/ true);
	public static Category t_CHARACTER_LITERAL = new Category("CHARACTER_LITERAL", /*terminal*/ true);
	public static Category t_BOOLEAN_LITERAL = new Category("BOOLEAN_LITERAL", /*terminal*/ true);
	public static Category t_DOUBLE_LITERAL = new Category("DOUBLE_LITERAL", /*terminal*/ true);
	public static Category t_FLOATING_POINT_LITERAL = new Category("FLOATING_POINT_LITERAL", /*terminal*/ true);
	public static Category t_LONG_LITERAL = new Category("LONG_LITERAL", /*terminal*/ true);
	public static Category t_INTEGER_LITERAL = new Category("INTEGER_LITERAL", /*terminal*/ true);
	public static Category t_BOOLEAN = new Category("BOOLEAN", /*terminal*/ true);
	public static Category t_CHAR = new Category("CHAR", /*terminal*/ true);
	public static Category t_LONG = new Category("LONG", /*terminal*/ true);
	public static Category t_INT = new Category("INT", /*terminal*/ true);
	public static Category t_SHORT = new Category("SHORT", /*terminal*/ true);
	public static Category t_BYTE = new Category("BYTE", /*terminal*/ true);
	public static Category t_DOUBLE = new Category("DOUBLE", /*terminal*/ true);
	public static Category t_FLOAT = new Category("FLOAT", /*terminal*/ true);
	public static Category t_IDENTIFIER = new Category("IDENTIFIER", /*terminal*/ true);
	public static Category t_DOT = new Category("DOT", /*terminal*/ true);
	public static Category t_DOCUMENTATION_COMMENT = new Category("DOCUMENTATION_COMMENT", /*terminal*/ true);
	public static Category t_PACKAGE = new Category("PACKAGE", /*terminal*/ true);
	public static Category t_IMPORT = new Category("IMPORT", /*terminal*/ true);
	public static Category t_MULT = new Category("MULT", /*terminal*/ true);
	public static Category t_STRICTFP = new Category("STRICTFP", /*terminal*/ true);
	public static Category t_VOLATILE = new Category("VOLATILE", /*terminal*/ true);
	public static Category t_TRANSIENT = new Category("TRANSIENT", /*terminal*/ true);
	public static Category t_SYNCHRONIZED = new Category("SYNCHRONIZED", /*terminal*/ true);
	public static Category t_NATIVE = new Category("NATIVE", /*terminal*/ true);
	public static Category t_FINAL = new Category("FINAL", /*terminal*/ true);
	public static Category t_ABSTRACT = new Category("ABSTRACT", /*terminal*/ true);
	public static Category t_STATIC = new Category("STATIC", /*terminal*/ true);
	public static Category t_PRIVATE = new Category("PRIVATE", /*terminal*/ true);
	public static Category t_PROTECTED = new Category("PROTECTED", /*terminal*/ true);
	public static Category t_PUBLIC = new Category("PUBLIC", /*terminal*/ true);
	public static Category t_CLASS = new Category("CLASS", /*terminal*/ true);
	public static Category t_EXTENDS = new Category("EXTENDS", /*terminal*/ true);
	public static Category t_IMPLEMENTS = new Category("IMPLEMENTS", /*terminal*/ true);
	public static Category t_COMMA = new Category("COMMA", /*terminal*/ true);
	public static Category t_EQ = new Category("EQ", /*terminal*/ true);
	public static Category t_VOID = new Category("VOID", /*terminal*/ true);
	public static Category t_LPAREN = new Category("LPAREN", /*terminal*/ true);
	public static Category t_RPAREN = new Category("RPAREN", /*terminal*/ true);
	public static Category t_THROWS = new Category("THROWS", /*terminal*/ true);
	public static Category t_SUPER = new Category("SUPER", /*terminal*/ true);
	public static Category t_THIS = new Category("THIS", /*terminal*/ true);
	public static Category t_INTERFACE = new Category("INTERFACE", /*terminal*/ true);
	public static Category t_IF = new Category("IF", /*terminal*/ true);
	public static Category t_ELSE = new Category("ELSE", /*terminal*/ true);
	public static Category t_COLON = new Category("COLON", /*terminal*/ true);
	public static Category t_SWITCH = new Category("SWITCH", /*terminal*/ true);
	public static Category t_DEFAULT = new Category("DEFAULT", /*terminal*/ true);
	public static Category t_CASE = new Category("CASE", /*terminal*/ true);
	public static Category t_WHILE = new Category("WHILE", /*terminal*/ true);
	public static Category t_DO = new Category("DO", /*terminal*/ true);
	public static Category t_FOR = new Category("FOR", /*terminal*/ true);
	public static Category t_BREAK = new Category("BREAK", /*terminal*/ true);
	public static Category t_CONTINUE = new Category("CONTINUE", /*terminal*/ true);
	public static Category t_RETURN = new Category("RETURN", /*terminal*/ true);
	public static Category t_THROW = new Category("THROW", /*terminal*/ true);
	public static Category t_TRY = new Category("TRY", /*terminal*/ true);
	public static Category t_CATCH = new Category("CATCH", /*terminal*/ true);
	public static Category t_FINALLY = new Category("FINALLY", /*terminal*/ true);
	public static Category t_ASSERT = new Category("ASSERT", /*terminal*/ true);
	public static Category t_NEW = new Category("NEW", /*terminal*/ true);
	public static Category t_LBRACK = new Category("LBRACK", /*terminal*/ true);
	public static Category t_RBRACK = new Category("RBRACK", /*terminal*/ true);
	public static Category t_PLUSPLUS = new Category("PLUSPLUS", /*terminal*/ true);
	public static Category t_MINUSMINUS = new Category("MINUSMINUS", /*terminal*/ true);
	public static Category t_MINUS = new Category("MINUS", /*terminal*/ true);
	public static Category t_PLUS = new Category("PLUS", /*terminal*/ true);
	public static Category t_NOT = new Category("NOT", /*terminal*/ true);
	public static Category t_COMP = new Category("COMP", /*terminal*/ true);
	public static Category t_MOD = new Category("MOD", /*terminal*/ true);
	public static Category t_DIV = new Category("DIV", /*terminal*/ true);
	public static Category t_URSHIFT = new Category("URSHIFT", /*terminal*/ true);
	public static Category t_RSHIFT = new Category("RSHIFT", /*terminal*/ true);
	public static Category t_LSHIFT = new Category("LSHIFT", /*terminal*/ true);
	public static Category t_INSTANCEOF = new Category("INSTANCEOF", /*terminal*/ true);
	public static Category t_GTEQ = new Category("GTEQ", /*terminal*/ true);
	public static Category t_LTEQ = new Category("LTEQ", /*terminal*/ true);
	public static Category t_GT = new Category("GT", /*terminal*/ true);
	public static Category t_LT = new Category("LT", /*terminal*/ true);
	public static Category t_NOTEQ = new Category("NOTEQ", /*terminal*/ true);
	public static Category t_EQEQ = new Category("EQEQ", /*terminal*/ true);
	public static Category t_AND = new Category("AND", /*terminal*/ true);
	public static Category t_XOR = new Category("XOR", /*terminal*/ true);
	public static Category t_OR = new Category("OR", /*terminal*/ true);
	public static Category t_ANDAND = new Category("ANDAND", /*terminal*/ true);
	public static Category t_OROR = new Category("OROR", /*terminal*/ true);
	public static Category t_QUESTION = new Category("QUESTION", /*terminal*/ true);
	public static Category t_OREQ = new Category("OREQ", /*terminal*/ true);
	public static Category t_XOREQ = new Category("XOREQ", /*terminal*/ true);
	public static Category t_ANDEQ = new Category("ANDEQ", /*terminal*/ true);
	public static Category t_URSHIFTEQ = new Category("URSHIFTEQ", /*terminal*/ true);
	public static Category t_RSHIFTEQ = new Category("RSHIFTEQ", /*terminal*/ true);
	public static Category t_LSHIFTEQ = new Category("LSHIFTEQ", /*terminal*/ true);
	public static Category t_MINUSEQ = new Category("MINUSEQ", /*terminal*/ true);
	public static Category t_PLUSEQ = new Category("PLUSEQ", /*terminal*/ true);
	public static Category t_MODEQ = new Category("MODEQ", /*terminal*/ true);
	public static Category t_DIVEQ = new Category("DIVEQ", /*terminal*/ true);
	public static Category t_MULTEQ = new Category("MULTEQ", /*terminal*/ true);
	public static Category t_METAVARID = new Category("METAVARID", /*terminal*/ true);
	public static Category t_GAP = new Category("GAP", /*terminal*/ true);

	public static Category n_class_body_declaration = new Category("class_body_declaration", /*terminal*/ false);
	public static Category n_block = new Category("block", /*terminal*/ false);
	public static Category n_switch_block = new Category("switch_block", /*terminal*/ false);
	public static Category n_statement = new Category("statement", /*terminal*/ false);
	public static Category n_goal = new Category("goal", /*terminal*/ false);
	public static Category n_literal = new Category("literal", /*terminal*/ false);
	public static Category n_type = new Category("type", /*terminal*/ false);
	public static Category n_primitive_type = new Category("primitive_type", /*terminal*/ false);
	public static Category n_numeric_type = new Category("numeric_type", /*terminal*/ false);
	public static Category n_integral_type = new Category("integral_type", /*terminal*/ false);
	public static Category n_floating_point_type = new Category("floating_point_type", /*terminal*/ false);
	public static Category n_reference_type = new Category("reference_type", /*terminal*/ false);
	public static Category n_class_or_interface_type = new Category("class_or_interface_type", /*terminal*/ false);
	public static Category n_class_type = new Category("class_type", /*terminal*/ false);
	public static Category n_interface_type = new Category("interface_type", /*terminal*/ false);
	public static Category n_array_type = new Category("array_type", /*terminal*/ false);
	public static Category n_name = new Category("name", /*terminal*/ false);
	public static Category n_simple_name = new Category("simple_name", /*terminal*/ false);
	public static Category n_qualified_name = new Category("qualified_name", /*terminal*/ false);
	public static Category n_compilation_unit = new Category("compilation_unit", /*terminal*/ false);
	public static Category n_import_declarations = new Category("import_declarations", /*terminal*/ false);
	public static Category n_type_declarations = new Category("type_declarations", /*terminal*/ false);
	public static Category n_doc_comment = new Category("doc_comment", /*terminal*/ false);
	public static Category n_doc_comment_list = new Category("doc_comment_list", /*terminal*/ false);
	public static Category n_package_with_comment = new Category("package_with_comment", /*terminal*/ false);
	public static Category n_package_declaration = new Category("package_declaration", /*terminal*/ false);
	public static Category n_name_decl = new Category("name_decl", /*terminal*/ false);
	public static Category n_simple_name_decl = new Category("simple_name_decl", /*terminal*/ false);
	public static Category n_qualified_name_decl = new Category("qualified_name_decl", /*terminal*/ false);
	public static Category n_import_with_comment = new Category("import_with_comment", /*terminal*/ false);
	public static Category n_import_declaration = new Category("import_declaration", /*terminal*/ false);
	public static Category n_single_type_import_declaration = new Category("single_type_import_declaration", /*terminal*/ false);
	public static Category n_type_import_on_demand_declaration = new Category("type_import_on_demand_declaration", /*terminal*/ false);
	public static Category n_type_with_comment = new Category("type_with_comment", /*terminal*/ false);
	public static Category n_type_declaration = new Category("type_declaration", /*terminal*/ false);
	public static Category n_modifiers = new Category("modifiers", /*terminal*/ false);
	public static Category n_modifier = new Category("modifier", /*terminal*/ false);
	public static Category n_wrapped_name = new Category("wrapped_name", /*terminal*/ false);
	public static Category n_class_declaration = new Category("class_declaration", /*terminal*/ false);
	public static Category n_super = new Category("super", /*terminal*/ false);
	public static Category n_interfaces = new Category("interfaces", /*terminal*/ false);
	public static Category n_interface_type_list = new Category("interface_type_list", /*terminal*/ false);
	public static Category n_class_body = new Category("class_body", /*terminal*/ false);
	public static Category n_class_body_declarations = new Category("class_body_declarations", /*terminal*/ false);
	public static Category n_body_decl_with_comment = new Category("body_decl_with_comment", /*terminal*/ false);
	public static Category n_class_member_declaration = new Category("class_member_declaration", /*terminal*/ false);
	public static Category n_field_declaration = new Category("field_declaration", /*terminal*/ false);
	public static Category n_field_declarators = new Category("field_declarators", /*terminal*/ false);
	public static Category n_field_declarator = new Category("field_declarator", /*terminal*/ false);
	public static Category n_field_declarator_id = new Category("field_declarator_id", /*terminal*/ false);
	public static Category n_variable_initializer = new Category("variable_initializer", /*terminal*/ false);
	public static Category n_method_declaration = new Category("method_declaration", /*terminal*/ false);
	public static Category n_method_header = new Category("method_header", /*terminal*/ false);
	public static Category n_formal_parameter_list = new Category("formal_parameter_list", /*terminal*/ false);
	public static Category n_formal_parameter = new Category("formal_parameter", /*terminal*/ false);
	public static Category n_throws = new Category("throws", /*terminal*/ false);
	public static Category n_class_type_list = new Category("class_type_list", /*terminal*/ false);
	public static Category n_static_initializer = new Category("static_initializer", /*terminal*/ false);
	public static Category n_instance_initializer = new Category("instance_initializer", /*terminal*/ false);
	public static Category n_constructor_declaration = new Category("constructor_declaration", /*terminal*/ false);
	public static Category n_explicit_constructor_invocation = new Category("explicit_constructor_invocation", /*terminal*/ false);
	public static Category n_interface_declaration = new Category("interface_declaration", /*terminal*/ false);
	public static Category n_extends_interfaces = new Category("extends_interfaces", /*terminal*/ false);
	public static Category n_interface_body = new Category("interface_body", /*terminal*/ false);
	public static Category n_interface_member_declarations = new Category("interface_member_declarations", /*terminal*/ false);
	public static Category n_interface_member_with_comment = new Category("interface_member_with_comment", /*terminal*/ false);
	public static Category n_interface_member_declaration = new Category("interface_member_declaration", /*terminal*/ false);
	public static Category n_constant_declaration = new Category("constant_declaration", /*terminal*/ false);
	public static Category n_abstract_method_declaration = new Category("abstract_method_declaration", /*terminal*/ false);
	public static Category n_array_initializer = new Category("array_initializer", /*terminal*/ false);
	public static Category n_variable_initializers = new Category("variable_initializers", /*terminal*/ false);
	public static Category n_block_statements = new Category("block_statements", /*terminal*/ false);
	public static Category n_block_statement = new Category("block_statement", /*terminal*/ false);
	public static Category n_local_variable_declaration_statement = new Category("local_variable_declaration_statement", /*terminal*/ false);
	public static Category n_local_variable_declaration = new Category("local_variable_declaration", /*terminal*/ false);
	public static Category n_variable_declarators = new Category("variable_declarators", /*terminal*/ false);
	public static Category n_variable_declarator = new Category("variable_declarator", /*terminal*/ false);
	public static Category n_variable_declarator_id = new Category("variable_declarator_id", /*terminal*/ false);
	public static Category n_statement_without_trailing_substatement = new Category("statement_without_trailing_substatement", /*terminal*/ false);
	public static Category n_statement_no_short_if = new Category("statement_no_short_if", /*terminal*/ false);
	public static Category n_if_then_statement = new Category("if_then_statement", /*terminal*/ false);
	public static Category n_if_then_else_statement = new Category("if_then_else_statement", /*terminal*/ false);
	public static Category n_if_then_else_statement_no_short_if = new Category("if_then_else_statement_no_short_if", /*terminal*/ false);
	public static Category n_empty_statement = new Category("empty_statement", /*terminal*/ false);
	public static Category n_labeled_statement = new Category("labeled_statement", /*terminal*/ false);
	public static Category n_labeled_statement_no_short_if = new Category("labeled_statement_no_short_if", /*terminal*/ false);
	public static Category n_expression_statement = new Category("expression_statement", /*terminal*/ false);
	public static Category n_statement_expression = new Category("statement_expression", /*terminal*/ false);
	public static Category n_switch_statement = new Category("switch_statement", /*terminal*/ false);
	public static Category n_switch_statements = new Category("switch_statements", /*terminal*/ false);
	public static Category n_switch_label = new Category("switch_label", /*terminal*/ false);
	public static Category n_while_statement = new Category("while_statement", /*terminal*/ false);
	public static Category n_while_statement_no_short_if = new Category("while_statement_no_short_if", /*terminal*/ false);
	public static Category n_do_statement = new Category("do_statement", /*terminal*/ false);
	public static Category n_for_statement = new Category("for_statement", /*terminal*/ false);
	public static Category n_for_statement_no_short_if = new Category("for_statement_no_short_if", /*terminal*/ false);
	public static Category n_for_init = new Category("for_init", /*terminal*/ false);
	public static Category n_for_update = new Category("for_update", /*terminal*/ false);
	public static Category n_statement_expression_list = new Category("statement_expression_list", /*terminal*/ false);
	public static Category n_break_statement = new Category("break_statement", /*terminal*/ false);
	public static Category n_continue_statement = new Category("continue_statement", /*terminal*/ false);
	public static Category n_return_statement = new Category("return_statement", /*terminal*/ false);
	public static Category n_throw_statement = new Category("throw_statement", /*terminal*/ false);
	public static Category n_synchronized_statement = new Category("synchronized_statement", /*terminal*/ false);
	public static Category n_try_statement = new Category("try_statement", /*terminal*/ false);
	public static Category n_catches = new Category("catches", /*terminal*/ false);
	public static Category n_catch_clause = new Category("catch_clause", /*terminal*/ false);
	public static Category n_finally = new Category("finally", /*terminal*/ false);
	public static Category n_assert_statement = new Category("assert_statement", /*terminal*/ false);
	public static Category n_primary = new Category("primary", /*terminal*/ false);
	public static Category n_class_literal = new Category("class_literal", /*terminal*/ false);
	public static Category n_primary_no_new_array = new Category("primary_no_new_array", /*terminal*/ false);
	public static Category n_class_instance_creation_expression = new Category("class_instance_creation_expression", /*terminal*/ false);
	public static Category n_argument_list = new Category("argument_list", /*terminal*/ false);
	public static Category n_array_creation_uninit = new Category("array_creation_uninit", /*terminal*/ false);
	public static Category n_array_creation_init = new Category("array_creation_init", /*terminal*/ false);
	public static Category n_dim_exprs = new Category("dim_exprs", /*terminal*/ false);
	public static Category n_dim_expr = new Category("dim_expr", /*terminal*/ false);
	public static Category n_dims = new Category("dims", /*terminal*/ false);
	public static Category n_field_access = new Category("field_access", /*terminal*/ false);
	public static Category n_method_invocation = new Category("method_invocation", /*terminal*/ false);
	public static Category n_array_access = new Category("array_access", /*terminal*/ false);
	public static Category n_postfix_expression = new Category("postfix_expression", /*terminal*/ false);
	public static Category n_postincrement_expression = new Category("postincrement_expression", /*terminal*/ false);
	public static Category n_postdecrement_expression = new Category("postdecrement_expression", /*terminal*/ false);
	public static Category n_unary_expression = new Category("unary_expression", /*terminal*/ false);
	public static Category n_preincrement_expression = new Category("preincrement_expression", /*terminal*/ false);
	public static Category n_predecrement_expression = new Category("predecrement_expression", /*terminal*/ false);
	public static Category n_unary_expression_not_plus_minus = new Category("unary_expression_not_plus_minus", /*terminal*/ false);
	public static Category n_cast_expression = new Category("cast_expression", /*terminal*/ false);
	public static Category n_multiplicative_expression = new Category("multiplicative_expression", /*terminal*/ false);
	public static Category n_additive_expression = new Category("additive_expression", /*terminal*/ false);
	public static Category n_shift_expression = new Category("shift_expression", /*terminal*/ false);
	public static Category n_relational_expression = new Category("relational_expression", /*terminal*/ false);
	public static Category n_equality_expression = new Category("equality_expression", /*terminal*/ false);
	public static Category n_and_expression = new Category("and_expression", /*terminal*/ false);
	public static Category n_exclusive_or_expression = new Category("exclusive_or_expression", /*terminal*/ false);
	public static Category n_inclusive_or_expression = new Category("inclusive_or_expression", /*terminal*/ false);
	public static Category n_conditional_and_expression = new Category("conditional_and_expression", /*terminal*/ false);
	public static Category n_conditional_or_expression = new Category("conditional_or_expression", /*terminal*/ false);
	public static Category n_conditional_expression = new Category("conditional_expression", /*terminal*/ false);
	public static Category n_assignment_expression = new Category("assignment_expression", /*terminal*/ false);
	public static Category n_assignment = new Category("assignment", /*terminal*/ false);
	public static Category n_expression = new Category("expression", /*terminal*/ false);
	public static Category n_constant_expression = new Category("constant_expression", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_array_initializer = new Category("META_OR_CONCRETE_NO_GAP_array_initializer", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_array_initializer = new Category("META_OR_CONCRETE_array_initializer", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_assignment = new Category("META_OR_CONCRETE_NO_GAP_assignment", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_assignment = new Category("META_OR_CONCRETE_assignment", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_block = new Category("META_OR_CONCRETE_NO_GAP_block", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_block = new Category("META_OR_CONCRETE_block", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_catch_clause = new Category("META_OR_CONCRETE_NO_GAP_catch_clause", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_catch_clause = new Category("META_OR_CONCRETE_catch_clause", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_class_declaration = new Category("META_OR_CONCRETE_NO_GAP_class_declaration", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_class_declaration = new Category("META_OR_CONCRETE_class_declaration", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_class_instance_creation_expression = new Category("META_OR_CONCRETE_NO_GAP_class_instance_creation_expression", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_class_instance_creation_expression = new Category("META_OR_CONCRETE_class_instance_creation_expression", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_class_literal = new Category("META_OR_CONCRETE_NO_GAP_class_literal", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_class_literal = new Category("META_OR_CONCRETE_class_literal", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_dim_expr = new Category("META_OR_CONCRETE_NO_GAP_dim_expr", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_dim_expr = new Category("META_OR_CONCRETE_dim_expr", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation = new Category("META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_explicit_constructor_invocation = new Category("META_OR_CONCRETE_explicit_constructor_invocation", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_field_declaration = new Category("META_OR_CONCRETE_NO_GAP_field_declaration", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_field_declaration = new Category("META_OR_CONCRETE_field_declaration", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_field_declarator_id = new Category("META_OR_CONCRETE_NO_GAP_field_declarator_id", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_field_declarator_id = new Category("META_OR_CONCRETE_field_declarator_id", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_finally = new Category("META_OR_CONCRETE_NO_GAP_finally", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_finally = new Category("META_OR_CONCRETE_finally", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_floating_point_type = new Category("META_OR_CONCRETE_NO_GAP_floating_point_type", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_floating_point_type = new Category("META_OR_CONCRETE_floating_point_type", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_formal_parameter = new Category("META_OR_CONCRETE_NO_GAP_formal_parameter", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_formal_parameter = new Category("META_OR_CONCRETE_formal_parameter", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_interface_declaration = new Category("META_OR_CONCRETE_NO_GAP_interface_declaration", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_interface_declaration = new Category("META_OR_CONCRETE_interface_declaration", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_local_variable_declaration = new Category("META_OR_CONCRETE_NO_GAP_local_variable_declaration", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_local_variable_declaration = new Category("META_OR_CONCRETE_local_variable_declaration", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_method_header = new Category("META_OR_CONCRETE_NO_GAP_method_header", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_method_header = new Category("META_OR_CONCRETE_method_header", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_method_invocation = new Category("META_OR_CONCRETE_NO_GAP_method_invocation", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_method_invocation = new Category("META_OR_CONCRETE_method_invocation", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_modifier = new Category("META_OR_CONCRETE_NO_GAP_modifier", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_modifier = new Category("META_OR_CONCRETE_modifier", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_package_declaration = new Category("META_OR_CONCRETE_NO_GAP_package_declaration", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_package_declaration = new Category("META_OR_CONCRETE_package_declaration", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_postdecrement_expression = new Category("META_OR_CONCRETE_NO_GAP_postdecrement_expression", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_postdecrement_expression = new Category("META_OR_CONCRETE_postdecrement_expression", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_postincrement_expression = new Category("META_OR_CONCRETE_NO_GAP_postincrement_expression", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_postincrement_expression = new Category("META_OR_CONCRETE_postincrement_expression", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_predecrement_expression = new Category("META_OR_CONCRETE_NO_GAP_predecrement_expression", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_predecrement_expression = new Category("META_OR_CONCRETE_predecrement_expression", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_preincrement_expression = new Category("META_OR_CONCRETE_NO_GAP_preincrement_expression", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_preincrement_expression = new Category("META_OR_CONCRETE_preincrement_expression", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_qualified_name_decl = new Category("META_OR_CONCRETE_NO_GAP_qualified_name_decl", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_qualified_name_decl = new Category("META_OR_CONCRETE_qualified_name_decl", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_simple_name = new Category("META_OR_CONCRETE_NO_GAP_simple_name", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_simple_name = new Category("META_OR_CONCRETE_simple_name", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_statement_expression = new Category("META_OR_CONCRETE_NO_GAP_statement_expression", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_statement_expression = new Category("META_OR_CONCRETE_statement_expression", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_super = new Category("META_OR_CONCRETE_NO_GAP_super", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_super = new Category("META_OR_CONCRETE_super", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_switch_block = new Category("META_OR_CONCRETE_NO_GAP_switch_block", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_switch_block = new Category("META_OR_CONCRETE_switch_block", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_switch_label = new Category("META_OR_CONCRETE_NO_GAP_switch_label", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_switch_label = new Category("META_OR_CONCRETE_switch_label", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_type_import_on_demand_declaration = new Category("META_OR_CONCRETE_NO_GAP_type_import_on_demand_declaration", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_type_import_on_demand_declaration = new Category("META_OR_CONCRETE_type_import_on_demand_declaration", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_variable_declarator_id = new Category("META_OR_CONCRETE_NO_GAP_variable_declarator_id", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_variable_declarator_id = new Category("META_OR_CONCRETE_variable_declarator_id", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_NO_GAP_wrapped_name = new Category("META_OR_CONCRETE_NO_GAP_wrapped_name", /*terminal*/ false);
	public static Category n_META_OR_CONCRETE_wrapped_name = new Category("META_OR_CONCRETE_wrapped_name", /*terminal*/ false);

	public static void addRules(Grammar g) {
		g.addRule(new Rule(n_class_body_declaration, t_error, t_LBRACE));
		g.addRule(new Rule(n_class_body_declaration, t_error, t_SEMICOLON));
		g.addRule(new Rule(n_class_body_declaration, n_constructor_declaration));
		g.addRule(new Rule(n_class_body_declaration, n_static_initializer));
		g.addRule(new Rule(n_class_body_declaration, n_instance_initializer));
		g.addRule(new Rule(n_class_body_declaration, n_class_member_declaration));
		g.addRule(new Rule(n_block, t_LBRACE, t_error, t_RBRACE));
		g.addRule(new Rule(n_block, t_LBRACE, t_RBRACE));
		g.addRule(new Rule(n_block, t_LBRACE, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_switch_block, t_LBRACE, t_error, t_RBRACE));
		g.addRule(new Rule(n_switch_block, t_LBRACE, t_RBRACE));
		g.addRule(new Rule(n_switch_block, t_LBRACE, n_switch_statements, t_RBRACE));
		g.addRule(new Rule(n_statement, t_error, t_SEMICOLON));
		g.addRule(new Rule(n_statement, n_for_statement));
		g.addRule(new Rule(n_statement, n_while_statement));
		g.addRule(new Rule(n_statement, n_if_then_else_statement));
		g.addRule(new Rule(n_statement, n_if_then_statement));
		g.addRule(new Rule(n_statement, n_labeled_statement));
		g.addRule(new Rule(n_statement, n_statement_without_trailing_substatement));
		g.addRule(new Rule(n_goal, n_compilation_unit));
		g.addRule(new Rule(n_literal, t_NULL_LITERAL));
		g.addRule(new Rule(n_literal, t_STRING_LITERAL));
		g.addRule(new Rule(n_literal, t_CHARACTER_LITERAL));
		g.addRule(new Rule(n_literal, t_BOOLEAN_LITERAL));
		g.addRule(new Rule(n_literal, t_DOUBLE_LITERAL));
		g.addRule(new Rule(n_literal, t_FLOATING_POINT_LITERAL));
		g.addRule(new Rule(n_literal, t_LONG_LITERAL));
		g.addRule(new Rule(n_literal, t_INTEGER_LITERAL));
		g.addRule(new Rule(n_type, n_reference_type));
		g.addRule(new Rule(n_type, n_primitive_type));
		g.addRule(new Rule(n_primitive_type, t_BOOLEAN));
		g.addRule(new Rule(n_primitive_type, n_numeric_type));
		g.addRule(new Rule(n_numeric_type, n_META_OR_CONCRETE_floating_point_type));
		g.addRule(new Rule(n_numeric_type, n_integral_type));
		g.addRule(new Rule(n_integral_type, t_CHAR));
		g.addRule(new Rule(n_integral_type, t_LONG));
		g.addRule(new Rule(n_integral_type, t_INT));
		g.addRule(new Rule(n_integral_type, t_SHORT));
		g.addRule(new Rule(n_integral_type, t_BYTE));
		g.addRule(new Rule(n_floating_point_type, t_DOUBLE));
		g.addRule(new Rule(n_floating_point_type, t_FLOAT));
		g.addRule(new Rule(n_reference_type, n_array_type));
		g.addRule(new Rule(n_reference_type, n_class_or_interface_type));
		g.addRule(new Rule(n_class_or_interface_type, n_name));
		g.addRule(new Rule(n_class_type, n_class_or_interface_type));
		g.addRule(new Rule(n_interface_type, n_class_or_interface_type));
		g.addRule(new Rule(n_array_type, n_name, n_dims));
		g.addRule(new Rule(n_array_type, n_primitive_type, n_dims));
		g.addRule(new Rule(n_name, n_qualified_name));
		g.addRule(new Rule(n_name, n_META_OR_CONCRETE_simple_name));
		g.addRule(new Rule(n_simple_name, t_IDENTIFIER));
		g.addRule(new Rule(n_qualified_name, n_name, t_DOT, n_META_OR_CONCRETE_simple_name));
		g.addRule(new Rule(n_compilation_unit, n_import_declarations));
		g.addRule(new Rule(n_compilation_unit, n_type_declarations));
		g.addRule(new Rule(n_compilation_unit, n_import_declarations, n_type_declarations));
		g.addRule(new Rule(n_compilation_unit, n_doc_comment_list));
		g.addRule(new Rule(n_compilation_unit, n_import_declarations, n_doc_comment_list));
		g.addRule(new Rule(n_compilation_unit, n_type_declarations, n_doc_comment_list));
		g.addRule(new Rule(n_compilation_unit, n_import_declarations, n_type_declarations, n_doc_comment_list));
		g.addRule(new Rule(n_compilation_unit, n_package_with_comment));
		g.addRule(new Rule(n_compilation_unit, n_package_with_comment, n_import_declarations));
		g.addRule(new Rule(n_compilation_unit, n_package_with_comment, n_type_declarations));
		g.addRule(new Rule(n_compilation_unit, n_package_with_comment, n_import_declarations, n_type_declarations));
		g.addRule(new Rule(n_compilation_unit, n_package_with_comment, n_doc_comment_list));
		g.addRule(new Rule(n_compilation_unit, n_package_with_comment, n_import_declarations, n_doc_comment_list));
		g.addRule(new Rule(n_compilation_unit, n_package_with_comment, n_type_declarations, n_doc_comment_list));
		g.addRule(new Rule(n_compilation_unit, n_package_with_comment, n_import_declarations, n_type_declarations, n_doc_comment_list));
		g.addRule(new Rule(n_import_declarations, n_import_declarations, n_import_with_comment));
		g.addRule(new Rule(n_import_declarations, n_import_with_comment));
		g.addRule(new Rule(n_type_declarations, n_type_declarations, n_type_with_comment));
		g.addRule(new Rule(n_type_declarations, n_type_declarations, t_SEMICOLON));
		g.addRule(new Rule(n_type_declarations, n_type_with_comment));
		g.addRule(new Rule(n_type_declarations, t_SEMICOLON));
		g.addRule(new Rule(n_doc_comment, t_DOCUMENTATION_COMMENT));
		g.addRule(new Rule(n_doc_comment_list, n_doc_comment_list, n_doc_comment));
		g.addRule(new Rule(n_doc_comment_list, n_doc_comment));
		g.addRule(new Rule(n_package_with_comment, n_META_OR_CONCRETE_package_declaration));
		g.addRule(new Rule(n_package_with_comment, n_doc_comment_list, n_META_OR_CONCRETE_package_declaration));
		g.addRule(new Rule(n_package_declaration, t_PACKAGE, n_name_decl, t_SEMICOLON));
		g.addRule(new Rule(n_name_decl, n_META_OR_CONCRETE_qualified_name_decl));
		g.addRule(new Rule(n_name_decl, n_simple_name_decl));
		g.addRule(new Rule(n_simple_name_decl, t_IDENTIFIER));
		g.addRule(new Rule(n_qualified_name_decl, n_name_decl, t_DOT, t_IDENTIFIER));
		g.addRule(new Rule(n_import_with_comment, n_import_declaration));
		g.addRule(new Rule(n_import_with_comment, n_doc_comment_list, n_import_declaration));
		g.addRule(new Rule(n_import_declaration, n_META_OR_CONCRETE_type_import_on_demand_declaration));
		g.addRule(new Rule(n_import_declaration, n_single_type_import_declaration));
		g.addRule(new Rule(n_single_type_import_declaration, t_IMPORT, n_name, t_SEMICOLON));
		g.addRule(new Rule(n_type_import_on_demand_declaration, t_IMPORT, n_name, t_DOT, t_MULT, t_SEMICOLON));
		g.addRule(new Rule(n_type_with_comment, n_doc_comment_list, n_type_declaration));
		g.addRule(new Rule(n_type_with_comment, n_type_declaration));
		g.addRule(new Rule(n_type_declaration, n_META_OR_CONCRETE_interface_declaration));
		g.addRule(new Rule(n_type_declaration, n_META_OR_CONCRETE_class_declaration));
		g.addRule(new Rule(n_modifiers, n_modifiers, n_META_OR_CONCRETE_modifier));
		g.addRule(new Rule(n_modifiers, n_META_OR_CONCRETE_modifier));
		g.addRule(new Rule(n_modifier, t_STRICTFP));
		g.addRule(new Rule(n_modifier, t_VOLATILE));
		g.addRule(new Rule(n_modifier, t_TRANSIENT));
		g.addRule(new Rule(n_modifier, t_SYNCHRONIZED));
		g.addRule(new Rule(n_modifier, t_NATIVE));
		g.addRule(new Rule(n_modifier, t_FINAL));
		g.addRule(new Rule(n_modifier, t_ABSTRACT));
		g.addRule(new Rule(n_modifier, t_STATIC));
		g.addRule(new Rule(n_modifier, t_PRIVATE));
		g.addRule(new Rule(n_modifier, t_PROTECTED));
		g.addRule(new Rule(n_modifier, t_PUBLIC));
		g.addRule(new Rule(n_wrapped_name, t_IDENTIFIER));
		g.addRule(new Rule(n_class_declaration, t_CLASS, n_META_OR_CONCRETE_wrapped_name, n_class_body));
		g.addRule(new Rule(n_class_declaration, n_modifiers, t_CLASS, n_META_OR_CONCRETE_wrapped_name, n_class_body));
		g.addRule(new Rule(n_class_declaration, t_CLASS, n_META_OR_CONCRETE_wrapped_name, n_META_OR_CONCRETE_super, n_class_body));
		g.addRule(new Rule(n_class_declaration, n_modifiers, t_CLASS, n_META_OR_CONCRETE_wrapped_name, n_META_OR_CONCRETE_super, n_class_body));
		g.addRule(new Rule(n_class_declaration, t_CLASS, n_META_OR_CONCRETE_wrapped_name, n_interfaces, n_class_body));
		g.addRule(new Rule(n_class_declaration, n_modifiers, t_CLASS, n_META_OR_CONCRETE_wrapped_name, n_interfaces, n_class_body));
		g.addRule(new Rule(n_class_declaration, t_CLASS, n_META_OR_CONCRETE_wrapped_name, n_META_OR_CONCRETE_super, n_interfaces, n_class_body));
		g.addRule(new Rule(n_class_declaration, n_modifiers, t_CLASS, n_META_OR_CONCRETE_wrapped_name, n_META_OR_CONCRETE_super, n_interfaces, n_class_body));
		g.addRule(new Rule(n_super, t_EXTENDS, n_class_type));
		g.addRule(new Rule(n_interfaces, t_IMPLEMENTS, n_interface_type_list));
		g.addRule(new Rule(n_interface_type_list, n_interface_type_list, t_COMMA, n_interface_type));
		g.addRule(new Rule(n_interface_type_list, n_interface_type));
		g.addRule(new Rule(n_class_body, t_LBRACE, t_RBRACE));
		g.addRule(new Rule(n_class_body, t_LBRACE, n_class_body_declarations, t_RBRACE));
		g.addRule(new Rule(n_class_body, t_LBRACE, n_doc_comment_list, t_RBRACE));
		g.addRule(new Rule(n_class_body, t_LBRACE, n_class_body_declarations, n_doc_comment_list, t_RBRACE));
		g.addRule(new Rule(n_class_body_declarations, n_class_body_declarations, n_body_decl_with_comment));
		g.addRule(new Rule(n_class_body_declarations, n_body_decl_with_comment));
		g.addRule(new Rule(n_body_decl_with_comment, n_doc_comment_list, n_class_body_declaration));
		g.addRule(new Rule(n_body_decl_with_comment, n_class_body_declaration));
		g.addRule(new Rule(n_class_member_declaration, t_SEMICOLON));
		g.addRule(new Rule(n_class_member_declaration, n_META_OR_CONCRETE_interface_declaration));
		g.addRule(new Rule(n_class_member_declaration, n_META_OR_CONCRETE_class_declaration));
		g.addRule(new Rule(n_class_member_declaration, n_method_declaration));
		g.addRule(new Rule(n_class_member_declaration, n_META_OR_CONCRETE_field_declaration));
		g.addRule(new Rule(n_field_declaration, n_type, n_field_declarators, t_SEMICOLON));
		g.addRule(new Rule(n_field_declaration, n_modifiers, n_type, n_field_declarators, t_SEMICOLON));
		g.addRule(new Rule(n_field_declarators, n_field_declarators, t_COMMA, n_field_declarator));
		g.addRule(new Rule(n_field_declarators, n_field_declarator));
		g.addRule(new Rule(n_field_declarator, n_META_OR_CONCRETE_field_declarator_id, t_EQ, n_variable_initializer));
		g.addRule(new Rule(n_field_declarator, n_META_OR_CONCRETE_field_declarator_id));
		g.addRule(new Rule(n_field_declarator_id, n_META_OR_CONCRETE_wrapped_name));
		g.addRule(new Rule(n_field_declarator_id, n_META_OR_CONCRETE_wrapped_name, n_dims));
		g.addRule(new Rule(n_variable_initializer, n_META_OR_CONCRETE_array_initializer));
		g.addRule(new Rule(n_variable_initializer, n_expression));
		g.addRule(new Rule(n_method_declaration, n_META_OR_CONCRETE_method_header, t_SEMICOLON));
		g.addRule(new Rule(n_method_declaration, n_META_OR_CONCRETE_method_header, n_META_OR_CONCRETE_block));
		g.addRule(new Rule(n_method_header, t_VOID, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN));
		g.addRule(new Rule(n_method_header, n_modifiers, t_VOID, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN));
		g.addRule(new Rule(n_method_header, t_VOID, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN));
		g.addRule(new Rule(n_method_header, n_modifiers, t_VOID, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN));
		g.addRule(new Rule(n_method_header, t_VOID, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_throws));
		g.addRule(new Rule(n_method_header, n_modifiers, t_VOID, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_throws));
		g.addRule(new Rule(n_method_header, t_VOID, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
		g.addRule(new Rule(n_method_header, n_modifiers, t_VOID, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
		g.addRule(new Rule(n_method_header, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN));
		g.addRule(new Rule(n_method_header, n_modifiers, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN));
		g.addRule(new Rule(n_method_header, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN));
		g.addRule(new Rule(n_method_header, n_modifiers, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN));
		g.addRule(new Rule(n_method_header, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_dims));
		g.addRule(new Rule(n_method_header, n_modifiers, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_dims));
		g.addRule(new Rule(n_method_header, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims));
		g.addRule(new Rule(n_method_header, n_modifiers, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims));
		g.addRule(new Rule(n_method_header, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_throws));
		g.addRule(new Rule(n_method_header, n_modifiers, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_throws));
		g.addRule(new Rule(n_method_header, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
		g.addRule(new Rule(n_method_header, n_modifiers, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
		g.addRule(new Rule(n_method_header, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_dims, n_throws));
		g.addRule(new Rule(n_method_header, n_modifiers, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_dims, n_throws));
		g.addRule(new Rule(n_method_header, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims, n_throws));
		g.addRule(new Rule(n_method_header, n_modifiers, n_type, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims, n_throws));
		g.addRule(new Rule(n_formal_parameter_list, n_formal_parameter_list, t_COMMA, n_META_OR_CONCRETE_formal_parameter));
		g.addRule(new Rule(n_formal_parameter_list, n_META_OR_CONCRETE_formal_parameter));
		g.addRule(new Rule(n_formal_parameter, n_type, n_META_OR_CONCRETE_wrapped_name));
		g.addRule(new Rule(n_formal_parameter, n_modifiers, n_type, n_META_OR_CONCRETE_wrapped_name));
		g.addRule(new Rule(n_formal_parameter, n_type, n_META_OR_CONCRETE_wrapped_name, n_dims));
		g.addRule(new Rule(n_formal_parameter, n_modifiers, n_type, n_META_OR_CONCRETE_wrapped_name, n_dims));
		g.addRule(new Rule(n_throws, t_THROWS, n_class_type_list));
		g.addRule(new Rule(n_class_type_list, n_class_type_list, t_COMMA, n_class_type));
		g.addRule(new Rule(n_class_type_list, n_class_type));
		g.addRule(new Rule(n_static_initializer, t_STATIC, n_META_OR_CONCRETE_block));
		g.addRule(new Rule(n_instance_initializer, n_META_OR_CONCRETE_block));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, t_LBRACE, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, t_LBRACE, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, t_LBRACE, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, t_LBRACE, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_constructor_declaration, n_modifiers, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_explicit_constructor_invocation, n_block_statements, t_RBRACE));
		g.addRule(new Rule(n_explicit_constructor_invocation, n_name, t_DOT, t_SUPER, t_LPAREN, t_RPAREN, t_SEMICOLON));
		g.addRule(new Rule(n_explicit_constructor_invocation, n_name, t_DOT, t_SUPER, t_LPAREN, n_argument_list, t_RPAREN, t_SEMICOLON));
		g.addRule(new Rule(n_explicit_constructor_invocation, n_primary, t_DOT, t_SUPER, t_LPAREN, t_RPAREN, t_SEMICOLON));
		g.addRule(new Rule(n_explicit_constructor_invocation, n_primary, t_DOT, t_SUPER, t_LPAREN, n_argument_list, t_RPAREN, t_SEMICOLON));
		g.addRule(new Rule(n_explicit_constructor_invocation, t_SUPER, t_LPAREN, t_RPAREN, t_SEMICOLON));
		g.addRule(new Rule(n_explicit_constructor_invocation, t_SUPER, t_LPAREN, n_argument_list, t_RPAREN, t_SEMICOLON));
		g.addRule(new Rule(n_explicit_constructor_invocation, t_THIS, t_LPAREN, t_RPAREN, t_SEMICOLON));
		g.addRule(new Rule(n_explicit_constructor_invocation, t_THIS, t_LPAREN, n_argument_list, t_RPAREN, t_SEMICOLON));
		g.addRule(new Rule(n_interface_declaration, t_INTERFACE, n_META_OR_CONCRETE_wrapped_name, n_interface_body));
		g.addRule(new Rule(n_interface_declaration, n_modifiers, t_INTERFACE, n_META_OR_CONCRETE_wrapped_name, n_interface_body));
		g.addRule(new Rule(n_interface_declaration, t_INTERFACE, n_META_OR_CONCRETE_wrapped_name, n_extends_interfaces, n_interface_body));
		g.addRule(new Rule(n_interface_declaration, n_modifiers, t_INTERFACE, n_META_OR_CONCRETE_wrapped_name, n_extends_interfaces, n_interface_body));
		g.addRule(new Rule(n_extends_interfaces, n_extends_interfaces, t_COMMA, n_interface_type));
		g.addRule(new Rule(n_extends_interfaces, t_EXTENDS, n_interface_type));
		g.addRule(new Rule(n_interface_body, t_LBRACE, t_RBRACE));
		g.addRule(new Rule(n_interface_body, t_LBRACE, n_interface_member_declarations, t_RBRACE));
		g.addRule(new Rule(n_interface_body, t_LBRACE, n_doc_comment_list, t_RBRACE));
		g.addRule(new Rule(n_interface_body, t_LBRACE, n_interface_member_declarations, n_doc_comment_list, t_RBRACE));
		g.addRule(new Rule(n_interface_member_declarations, n_interface_member_declarations, n_interface_member_with_comment));
		g.addRule(new Rule(n_interface_member_declarations, n_interface_member_with_comment));
		g.addRule(new Rule(n_interface_member_with_comment, n_doc_comment_list, n_interface_member_declaration));
		g.addRule(new Rule(n_interface_member_with_comment, n_interface_member_declaration));
		g.addRule(new Rule(n_interface_member_declaration, t_SEMICOLON));
		g.addRule(new Rule(n_interface_member_declaration, n_META_OR_CONCRETE_interface_declaration));
		g.addRule(new Rule(n_interface_member_declaration, n_META_OR_CONCRETE_class_declaration));
		g.addRule(new Rule(n_interface_member_declaration, n_abstract_method_declaration));
		g.addRule(new Rule(n_interface_member_declaration, n_constant_declaration));
		g.addRule(new Rule(n_constant_declaration, n_META_OR_CONCRETE_field_declaration));
		g.addRule(new Rule(n_abstract_method_declaration, n_META_OR_CONCRETE_method_header, t_SEMICOLON));
		g.addRule(new Rule(n_array_initializer, t_LBRACE, t_RBRACE));
		g.addRule(new Rule(n_array_initializer, t_LBRACE, n_variable_initializers, t_RBRACE));
		g.addRule(new Rule(n_array_initializer, t_LBRACE, t_COMMA, t_RBRACE));
		g.addRule(new Rule(n_array_initializer, t_LBRACE, n_variable_initializers, t_COMMA, t_RBRACE));
		g.addRule(new Rule(n_variable_initializers, n_variable_initializers, t_COMMA, n_variable_initializer));
		g.addRule(new Rule(n_variable_initializers, n_variable_initializer));
		g.addRule(new Rule(n_block_statements, n_block_statements, n_block_statement));
		g.addRule(new Rule(n_block_statements, n_block_statement));
		g.addRule(new Rule(n_block_statement, n_statement));
		g.addRule(new Rule(n_block_statement, n_META_OR_CONCRETE_class_declaration));
		g.addRule(new Rule(n_block_statement, n_local_variable_declaration_statement));
		g.addRule(new Rule(n_local_variable_declaration_statement, n_META_OR_CONCRETE_local_variable_declaration, t_SEMICOLON));
		g.addRule(new Rule(n_local_variable_declaration, n_type, n_variable_declarators));
		g.addRule(new Rule(n_local_variable_declaration, n_modifiers, n_type, n_variable_declarators));
		g.addRule(new Rule(n_variable_declarators, n_variable_declarators, t_COMMA, n_variable_declarator));
		g.addRule(new Rule(n_variable_declarators, n_variable_declarator));
		g.addRule(new Rule(n_variable_declarator, n_META_OR_CONCRETE_variable_declarator_id, t_EQ, n_variable_initializer));
		g.addRule(new Rule(n_variable_declarator, n_META_OR_CONCRETE_variable_declarator_id));
		g.addRule(new Rule(n_variable_declarator_id, n_META_OR_CONCRETE_wrapped_name));
		g.addRule(new Rule(n_variable_declarator_id, n_META_OR_CONCRETE_wrapped_name, n_dims));
		g.addRule(new Rule(n_statement_without_trailing_substatement, n_assert_statement));
		g.addRule(new Rule(n_statement_without_trailing_substatement, n_try_statement));
		g.addRule(new Rule(n_statement_without_trailing_substatement, n_throw_statement));
		g.addRule(new Rule(n_statement_without_trailing_substatement, n_synchronized_statement));
		g.addRule(new Rule(n_statement_without_trailing_substatement, n_return_statement));
		g.addRule(new Rule(n_statement_without_trailing_substatement, n_continue_statement));
		g.addRule(new Rule(n_statement_without_trailing_substatement, n_break_statement));
		g.addRule(new Rule(n_statement_without_trailing_substatement, n_do_statement));
		g.addRule(new Rule(n_statement_without_trailing_substatement, n_switch_statement));
		g.addRule(new Rule(n_statement_without_trailing_substatement, n_expression_statement));
		g.addRule(new Rule(n_statement_without_trailing_substatement, n_empty_statement));
		g.addRule(new Rule(n_statement_without_trailing_substatement, n_META_OR_CONCRETE_block));
		g.addRule(new Rule(n_statement_no_short_if, n_for_statement_no_short_if));
		g.addRule(new Rule(n_statement_no_short_if, n_while_statement_no_short_if));
		g.addRule(new Rule(n_statement_no_short_if, n_if_then_else_statement_no_short_if));
		g.addRule(new Rule(n_statement_no_short_if, n_labeled_statement_no_short_if));
		g.addRule(new Rule(n_statement_no_short_if, n_statement_without_trailing_substatement));
		g.addRule(new Rule(n_if_then_statement, t_IF, t_LPAREN, n_expression, t_RPAREN, n_statement));
		g.addRule(new Rule(n_if_then_else_statement, t_IF, t_LPAREN, n_expression, t_RPAREN, n_statement_no_short_if, t_ELSE, n_statement));
		g.addRule(new Rule(n_if_then_else_statement_no_short_if, t_IF, t_LPAREN, n_expression, t_RPAREN, n_statement_no_short_if, t_ELSE, n_statement_no_short_if));
		g.addRule(new Rule(n_empty_statement, t_SEMICOLON));
		g.addRule(new Rule(n_labeled_statement, t_IDENTIFIER, t_COLON, n_statement));
		g.addRule(new Rule(n_labeled_statement_no_short_if, t_IDENTIFIER, t_COLON, n_statement_no_short_if));
		g.addRule(new Rule(n_expression_statement, n_META_OR_CONCRETE_statement_expression, t_SEMICOLON));
		g.addRule(new Rule(n_statement_expression, n_META_OR_CONCRETE_class_instance_creation_expression));
		g.addRule(new Rule(n_statement_expression, n_META_OR_CONCRETE_method_invocation));
		g.addRule(new Rule(n_statement_expression, n_META_OR_CONCRETE_postdecrement_expression));
		g.addRule(new Rule(n_statement_expression, n_META_OR_CONCRETE_postincrement_expression));
		g.addRule(new Rule(n_statement_expression, n_META_OR_CONCRETE_predecrement_expression));
		g.addRule(new Rule(n_statement_expression, n_META_OR_CONCRETE_preincrement_expression));
		g.addRule(new Rule(n_statement_expression, n_META_OR_CONCRETE_assignment));
		g.addRule(new Rule(n_switch_statement, t_SWITCH, t_LPAREN, n_expression, t_RPAREN, n_META_OR_CONCRETE_switch_block));
		g.addRule(new Rule(n_switch_statements, n_switch_statements, n_block_statement));
		g.addRule(new Rule(n_switch_statements, n_switch_statements, n_META_OR_CONCRETE_switch_label));
		g.addRule(new Rule(n_switch_statements, n_META_OR_CONCRETE_switch_label));
		g.addRule(new Rule(n_switch_label, t_DEFAULT, t_COLON));
		g.addRule(new Rule(n_switch_label, t_CASE, n_constant_expression, t_COLON));
		g.addRule(new Rule(n_while_statement, t_WHILE, t_LPAREN, n_expression, t_RPAREN, n_statement));
		g.addRule(new Rule(n_while_statement_no_short_if, t_WHILE, t_LPAREN, n_expression, t_RPAREN, n_statement_no_short_if));
		g.addRule(new Rule(n_do_statement, t_DO, n_statement, t_WHILE, t_LPAREN, n_expression, t_RPAREN, t_SEMICOLON));
		g.addRule(new Rule(n_for_statement, t_FOR, t_LPAREN, t_SEMICOLON, t_SEMICOLON, t_RPAREN, n_statement));
		g.addRule(new Rule(n_for_statement, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, t_SEMICOLON, t_RPAREN, n_statement));
		g.addRule(new Rule(n_for_statement, t_FOR, t_LPAREN, t_SEMICOLON, n_expression, t_SEMICOLON, t_RPAREN, n_statement));
		g.addRule(new Rule(n_for_statement, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, n_expression, t_SEMICOLON, t_RPAREN, n_statement));
		g.addRule(new Rule(n_for_statement, t_FOR, t_LPAREN, t_SEMICOLON, t_SEMICOLON, n_for_update, t_RPAREN, n_statement));
		g.addRule(new Rule(n_for_statement, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, t_SEMICOLON, n_for_update, t_RPAREN, n_statement));
		g.addRule(new Rule(n_for_statement, t_FOR, t_LPAREN, t_SEMICOLON, n_expression, t_SEMICOLON, n_for_update, t_RPAREN, n_statement));
		g.addRule(new Rule(n_for_statement, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, n_expression, t_SEMICOLON, n_for_update, t_RPAREN, n_statement));
		g.addRule(new Rule(n_for_statement_no_short_if, t_FOR, t_LPAREN, t_SEMICOLON, t_SEMICOLON, t_RPAREN, n_statement_no_short_if));
		g.addRule(new Rule(n_for_statement_no_short_if, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, t_SEMICOLON, t_RPAREN, n_statement_no_short_if));
		g.addRule(new Rule(n_for_statement_no_short_if, t_FOR, t_LPAREN, t_SEMICOLON, n_expression, t_SEMICOLON, t_RPAREN, n_statement_no_short_if));
		g.addRule(new Rule(n_for_statement_no_short_if, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, n_expression, t_SEMICOLON, t_RPAREN, n_statement_no_short_if));
		g.addRule(new Rule(n_for_statement_no_short_if, t_FOR, t_LPAREN, t_SEMICOLON, t_SEMICOLON, n_for_update, t_RPAREN, n_statement_no_short_if));
		g.addRule(new Rule(n_for_statement_no_short_if, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, t_SEMICOLON, n_for_update, t_RPAREN, n_statement_no_short_if));
		g.addRule(new Rule(n_for_statement_no_short_if, t_FOR, t_LPAREN, t_SEMICOLON, n_expression, t_SEMICOLON, n_for_update, t_RPAREN, n_statement_no_short_if));
		g.addRule(new Rule(n_for_statement_no_short_if, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, n_expression, t_SEMICOLON, n_for_update, t_RPAREN, n_statement_no_short_if));
		g.addRule(new Rule(n_for_init, n_META_OR_CONCRETE_local_variable_declaration));
		g.addRule(new Rule(n_for_init, n_statement_expression_list));
		g.addRule(new Rule(n_for_update, n_statement_expression_list));
		g.addRule(new Rule(n_statement_expression_list, n_statement_expression_list, t_COMMA, n_META_OR_CONCRETE_statement_expression));
		g.addRule(new Rule(n_statement_expression_list, n_META_OR_CONCRETE_statement_expression));
		g.addRule(new Rule(n_break_statement, t_BREAK, t_SEMICOLON));
		g.addRule(new Rule(n_break_statement, t_BREAK, t_IDENTIFIER, t_SEMICOLON));
		g.addRule(new Rule(n_continue_statement, t_CONTINUE, t_SEMICOLON));
		g.addRule(new Rule(n_continue_statement, t_CONTINUE, t_IDENTIFIER, t_SEMICOLON));
		g.addRule(new Rule(n_return_statement, t_RETURN, t_SEMICOLON));
		g.addRule(new Rule(n_return_statement, t_RETURN, n_expression, t_SEMICOLON));
		g.addRule(new Rule(n_throw_statement, t_THROW, n_expression, t_SEMICOLON));
		g.addRule(new Rule(n_synchronized_statement, t_SYNCHRONIZED, t_LPAREN, n_expression, t_RPAREN, n_META_OR_CONCRETE_block));
		g.addRule(new Rule(n_try_statement, t_TRY, n_META_OR_CONCRETE_block, n_catches, n_META_OR_CONCRETE_finally));
		g.addRule(new Rule(n_try_statement, t_TRY, n_META_OR_CONCRETE_block, n_META_OR_CONCRETE_finally));
		g.addRule(new Rule(n_try_statement, t_TRY, n_META_OR_CONCRETE_block, n_catches));
		g.addRule(new Rule(n_catches, n_catches, n_META_OR_CONCRETE_catch_clause));
		g.addRule(new Rule(n_catches, n_META_OR_CONCRETE_catch_clause));
		g.addRule(new Rule(n_catch_clause, t_CATCH, t_LPAREN, n_META_OR_CONCRETE_formal_parameter, t_RPAREN, n_META_OR_CONCRETE_block));
		g.addRule(new Rule(n_finally, t_FINALLY, n_META_OR_CONCRETE_block));
		g.addRule(new Rule(n_assert_statement, t_ASSERT, n_expression, t_COLON, n_expression, t_SEMICOLON));
		g.addRule(new Rule(n_assert_statement, t_ASSERT, n_expression, t_SEMICOLON));
		g.addRule(new Rule(n_primary, n_array_creation_uninit));
		g.addRule(new Rule(n_primary, n_array_creation_init));
		g.addRule(new Rule(n_primary, n_primary_no_new_array));
		g.addRule(new Rule(n_class_literal, t_CLASS));
		g.addRule(new Rule(n_primary_no_new_array, n_array_access));
		g.addRule(new Rule(n_primary_no_new_array, n_META_OR_CONCRETE_method_invocation));
		g.addRule(new Rule(n_primary_no_new_array, n_field_access));
		g.addRule(new Rule(n_primary_no_new_array, n_META_OR_CONCRETE_class_instance_creation_expression));
		g.addRule(new Rule(n_primary_no_new_array, t_LPAREN, n_name, t_RPAREN));
		g.addRule(new Rule(n_primary_no_new_array, t_LPAREN, n_expression, t_RPAREN));
		g.addRule(new Rule(n_primary_no_new_array, n_name, t_DOT, t_THIS));
		g.addRule(new Rule(n_primary_no_new_array, t_THIS));
		g.addRule(new Rule(n_primary_no_new_array, t_VOID, t_DOT, n_META_OR_CONCRETE_class_literal));
		g.addRule(new Rule(n_primary_no_new_array, n_name, t_DOT, n_META_OR_CONCRETE_class_literal));
		g.addRule(new Rule(n_primary_no_new_array, n_name, n_dims, t_DOT, n_META_OR_CONCRETE_class_literal));
		g.addRule(new Rule(n_primary_no_new_array, n_primitive_type, t_DOT, n_META_OR_CONCRETE_class_literal));
		g.addRule(new Rule(n_primary_no_new_array, n_primitive_type, n_dims, t_DOT, n_META_OR_CONCRETE_class_literal));
		g.addRule(new Rule(n_primary_no_new_array, n_literal));
		g.addRule(new Rule(n_class_instance_creation_expression, n_name, t_DOT, t_NEW, n_META_OR_CONCRETE_simple_name, t_LPAREN, t_RPAREN, n_class_body));
		g.addRule(new Rule(n_class_instance_creation_expression, n_name, t_DOT, t_NEW, n_META_OR_CONCRETE_simple_name, t_LPAREN, n_argument_list, t_RPAREN, n_class_body));
		g.addRule(new Rule(n_class_instance_creation_expression, n_primary, t_DOT, t_NEW, n_META_OR_CONCRETE_simple_name, t_LPAREN, t_RPAREN, n_class_body));
		g.addRule(new Rule(n_class_instance_creation_expression, n_primary, t_DOT, t_NEW, n_META_OR_CONCRETE_simple_name, t_LPAREN, n_argument_list, t_RPAREN, n_class_body));
		g.addRule(new Rule(n_class_instance_creation_expression, t_NEW, n_class_or_interface_type, t_LPAREN, t_RPAREN, n_class_body));
		g.addRule(new Rule(n_class_instance_creation_expression, t_NEW, n_class_or_interface_type, t_LPAREN, n_argument_list, t_RPAREN, n_class_body));
		g.addRule(new Rule(n_class_instance_creation_expression, n_name, t_DOT, t_NEW, n_META_OR_CONCRETE_simple_name, t_LPAREN, t_RPAREN));
		g.addRule(new Rule(n_class_instance_creation_expression, n_name, t_DOT, t_NEW, n_META_OR_CONCRETE_simple_name, t_LPAREN, n_argument_list, t_RPAREN));
		g.addRule(new Rule(n_class_instance_creation_expression, n_primary, t_DOT, t_NEW, n_META_OR_CONCRETE_simple_name, t_LPAREN, t_RPAREN));
		g.addRule(new Rule(n_class_instance_creation_expression, n_primary, t_DOT, t_NEW, n_META_OR_CONCRETE_simple_name, t_LPAREN, n_argument_list, t_RPAREN));
		g.addRule(new Rule(n_class_instance_creation_expression, t_NEW, n_class_or_interface_type, t_LPAREN, t_RPAREN));
		g.addRule(new Rule(n_class_instance_creation_expression, t_NEW, n_class_or_interface_type, t_LPAREN, n_argument_list, t_RPAREN));
		g.addRule(new Rule(n_argument_list, n_argument_list, t_COMMA, n_expression));
		g.addRule(new Rule(n_argument_list, n_expression));
		g.addRule(new Rule(n_array_creation_uninit, t_NEW, n_class_or_interface_type, n_dim_exprs, n_dims));
		g.addRule(new Rule(n_array_creation_uninit, t_NEW, n_class_or_interface_type, n_dim_exprs));
		g.addRule(new Rule(n_array_creation_uninit, t_NEW, n_primitive_type, n_dim_exprs, n_dims));
		g.addRule(new Rule(n_array_creation_uninit, t_NEW, n_primitive_type, n_dim_exprs));
		g.addRule(new Rule(n_array_creation_init, t_NEW, n_class_or_interface_type, n_dims, n_META_OR_CONCRETE_array_initializer));
		g.addRule(new Rule(n_array_creation_init, t_NEW, n_primitive_type, n_dims, n_META_OR_CONCRETE_array_initializer));
		g.addRule(new Rule(n_dim_exprs, n_dim_exprs, n_META_OR_CONCRETE_dim_expr));
		g.addRule(new Rule(n_dim_exprs, n_META_OR_CONCRETE_dim_expr));
		g.addRule(new Rule(n_dim_expr, t_LBRACK, n_expression, t_RBRACK));
		g.addRule(new Rule(n_dims, n_dims, t_LBRACK, t_RBRACK));
		g.addRule(new Rule(n_dims, t_LBRACK, t_RBRACK));
		g.addRule(new Rule(n_field_access, n_name, t_DOT, t_SUPER, t_DOT, n_META_OR_CONCRETE_simple_name));
		g.addRule(new Rule(n_field_access, t_SUPER, t_DOT, n_META_OR_CONCRETE_simple_name));
		g.addRule(new Rule(n_field_access, n_primary, t_DOT, n_META_OR_CONCRETE_simple_name));
		g.addRule(new Rule(n_method_invocation, n_name, t_DOT, t_SUPER, t_DOT, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN));
		g.addRule(new Rule(n_method_invocation, n_name, t_DOT, t_SUPER, t_DOT, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_argument_list, t_RPAREN));
		g.addRule(new Rule(n_method_invocation, t_SUPER, t_DOT, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN));
		g.addRule(new Rule(n_method_invocation, t_SUPER, t_DOT, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_argument_list, t_RPAREN));
		g.addRule(new Rule(n_method_invocation, n_primary, t_DOT, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, t_RPAREN));
		g.addRule(new Rule(n_method_invocation, n_primary, t_DOT, n_META_OR_CONCRETE_wrapped_name, t_LPAREN, n_argument_list, t_RPAREN));
		g.addRule(new Rule(n_method_invocation, n_name, t_LPAREN, t_RPAREN));
		g.addRule(new Rule(n_method_invocation, n_name, t_LPAREN, n_argument_list, t_RPAREN));
		g.addRule(new Rule(n_array_access, n_primary_no_new_array, t_LBRACK, n_expression, t_RBRACK));
		g.addRule(new Rule(n_array_access, n_name, t_LBRACK, n_expression, t_RBRACK));
		g.addRule(new Rule(n_postfix_expression, n_META_OR_CONCRETE_postdecrement_expression));
		g.addRule(new Rule(n_postfix_expression, n_META_OR_CONCRETE_postincrement_expression));
		g.addRule(new Rule(n_postfix_expression, n_name));
		g.addRule(new Rule(n_postfix_expression, n_primary));
		g.addRule(new Rule(n_postincrement_expression, n_postfix_expression, t_PLUSPLUS));
		g.addRule(new Rule(n_postdecrement_expression, n_postfix_expression, t_MINUSMINUS));
		g.addRule(new Rule(n_unary_expression, n_unary_expression_not_plus_minus));
		g.addRule(new Rule(n_unary_expression, t_MINUS, n_unary_expression));
		g.addRule(new Rule(n_unary_expression, t_PLUS, n_unary_expression));
		g.addRule(new Rule(n_unary_expression, n_META_OR_CONCRETE_predecrement_expression));
		g.addRule(new Rule(n_unary_expression, n_META_OR_CONCRETE_preincrement_expression));
		g.addRule(new Rule(n_preincrement_expression, t_PLUSPLUS, n_unary_expression));
		g.addRule(new Rule(n_predecrement_expression, t_MINUSMINUS, n_unary_expression));
		g.addRule(new Rule(n_unary_expression_not_plus_minus, n_cast_expression));
		g.addRule(new Rule(n_unary_expression_not_plus_minus, t_NOT, n_unary_expression));
		g.addRule(new Rule(n_unary_expression_not_plus_minus, t_COMP, n_unary_expression));
		g.addRule(new Rule(n_unary_expression_not_plus_minus, n_postfix_expression));
		g.addRule(new Rule(n_cast_expression, t_LPAREN, n_name, t_RPAREN, n_unary_expression_not_plus_minus));
		g.addRule(new Rule(n_cast_expression, t_LPAREN, n_name, n_dims, t_RPAREN, n_unary_expression_not_plus_minus));
		g.addRule(new Rule(n_cast_expression, t_LPAREN, n_primitive_type, t_RPAREN, n_unary_expression));
		g.addRule(new Rule(n_cast_expression, t_LPAREN, n_primitive_type, n_dims, t_RPAREN, n_unary_expression));
		g.addRule(new Rule(n_multiplicative_expression, n_multiplicative_expression, t_MOD, n_unary_expression));
		g.addRule(new Rule(n_multiplicative_expression, n_multiplicative_expression, t_DIV, n_unary_expression));
		g.addRule(new Rule(n_multiplicative_expression, n_multiplicative_expression, t_MULT, n_unary_expression));
		g.addRule(new Rule(n_multiplicative_expression, n_unary_expression));
		g.addRule(new Rule(n_additive_expression, n_additive_expression, t_MINUS, n_multiplicative_expression));
		g.addRule(new Rule(n_additive_expression, n_additive_expression, t_PLUS, n_multiplicative_expression));
		g.addRule(new Rule(n_additive_expression, n_multiplicative_expression));
		g.addRule(new Rule(n_shift_expression, n_shift_expression, t_URSHIFT, n_additive_expression));
		g.addRule(new Rule(n_shift_expression, n_shift_expression, t_RSHIFT, n_additive_expression));
		g.addRule(new Rule(n_shift_expression, n_shift_expression, t_LSHIFT, n_additive_expression));
		g.addRule(new Rule(n_shift_expression, n_additive_expression));
		g.addRule(new Rule(n_relational_expression, n_relational_expression, t_INSTANCEOF, n_reference_type));
		g.addRule(new Rule(n_relational_expression, n_relational_expression, t_GTEQ, n_shift_expression));
		g.addRule(new Rule(n_relational_expression, n_relational_expression, t_LTEQ, n_shift_expression));
		g.addRule(new Rule(n_relational_expression, n_relational_expression, t_GT, n_shift_expression));
		g.addRule(new Rule(n_relational_expression, n_relational_expression, t_LT, n_shift_expression));
		g.addRule(new Rule(n_relational_expression, n_shift_expression));
		g.addRule(new Rule(n_equality_expression, n_equality_expression, t_NOTEQ, n_relational_expression));
		g.addRule(new Rule(n_equality_expression, n_equality_expression, t_EQEQ, n_relational_expression));
		g.addRule(new Rule(n_equality_expression, n_relational_expression));
		g.addRule(new Rule(n_and_expression, n_and_expression, t_AND, n_equality_expression));
		g.addRule(new Rule(n_and_expression, n_equality_expression));
		g.addRule(new Rule(n_exclusive_or_expression, n_exclusive_or_expression, t_XOR, n_and_expression));
		g.addRule(new Rule(n_exclusive_or_expression, n_and_expression));
		g.addRule(new Rule(n_inclusive_or_expression, n_inclusive_or_expression, t_OR, n_exclusive_or_expression));
		g.addRule(new Rule(n_inclusive_or_expression, n_exclusive_or_expression));
		g.addRule(new Rule(n_conditional_and_expression, n_conditional_and_expression, t_ANDAND, n_inclusive_or_expression));
		g.addRule(new Rule(n_conditional_and_expression, n_inclusive_or_expression));
		g.addRule(new Rule(n_conditional_or_expression, n_conditional_or_expression, t_OROR, n_conditional_and_expression));
		g.addRule(new Rule(n_conditional_or_expression, n_conditional_and_expression));
		g.addRule(new Rule(n_conditional_expression, n_conditional_or_expression, t_QUESTION, n_expression, t_COLON, n_conditional_expression));
		g.addRule(new Rule(n_conditional_expression, n_conditional_or_expression));
		g.addRule(new Rule(n_assignment_expression, n_META_OR_CONCRETE_assignment));
		g.addRule(new Rule(n_assignment_expression, n_conditional_expression));
		g.addRule(new Rule(n_assignment, n_postfix_expression, t_OREQ, n_assignment_expression));
		g.addRule(new Rule(n_assignment, n_postfix_expression, t_XOREQ, n_assignment_expression));
		g.addRule(new Rule(n_assignment, n_postfix_expression, t_ANDEQ, n_assignment_expression));
		g.addRule(new Rule(n_assignment, n_postfix_expression, t_URSHIFTEQ, n_assignment_expression));
		g.addRule(new Rule(n_assignment, n_postfix_expression, t_RSHIFTEQ, n_assignment_expression));
		g.addRule(new Rule(n_assignment, n_postfix_expression, t_LSHIFTEQ, n_assignment_expression));
		g.addRule(new Rule(n_assignment, n_postfix_expression, t_MINUSEQ, n_assignment_expression));
		g.addRule(new Rule(n_assignment, n_postfix_expression, t_PLUSEQ, n_assignment_expression));
		g.addRule(new Rule(n_assignment, n_postfix_expression, t_MODEQ, n_assignment_expression));
		g.addRule(new Rule(n_assignment, n_postfix_expression, t_DIVEQ, n_assignment_expression));
		g.addRule(new Rule(n_assignment, n_postfix_expression, t_MULTEQ, n_assignment_expression));
		g.addRule(new Rule(n_assignment, n_postfix_expression, t_EQ, n_assignment_expression));
		g.addRule(new Rule(n_expression, n_assignment_expression));
		g.addRule(new Rule(n_constant_expression, n_expression));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_array_initializer, n_array_initializer));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_array_initializer, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_array_initializer, n_META_OR_CONCRETE_NO_GAP_array_initializer));
		g.addRule(new Rule(n_META_OR_CONCRETE_array_initializer, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_assignment, n_assignment));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_assignment, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_assignment, n_META_OR_CONCRETE_NO_GAP_assignment));
		g.addRule(new Rule(n_META_OR_CONCRETE_assignment, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_block, n_block));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_block, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_block, n_META_OR_CONCRETE_NO_GAP_block));
		g.addRule(new Rule(n_META_OR_CONCRETE_block, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_catch_clause, n_catch_clause));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_catch_clause, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_catch_clause, n_META_OR_CONCRETE_NO_GAP_catch_clause));
		g.addRule(new Rule(n_META_OR_CONCRETE_catch_clause, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_class_declaration, n_class_declaration));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_class_declaration, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_class_declaration, n_META_OR_CONCRETE_NO_GAP_class_declaration));
		g.addRule(new Rule(n_META_OR_CONCRETE_class_declaration, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_class_instance_creation_expression, n_class_instance_creation_expression));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_class_instance_creation_expression, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_class_instance_creation_expression));
		g.addRule(new Rule(n_META_OR_CONCRETE_class_instance_creation_expression, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_class_literal, n_class_literal));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_class_literal, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_class_literal, n_META_OR_CONCRETE_NO_GAP_class_literal));
		g.addRule(new Rule(n_META_OR_CONCRETE_class_literal, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_dim_expr, n_dim_expr));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_dim_expr, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_dim_expr, n_META_OR_CONCRETE_NO_GAP_dim_expr));
		g.addRule(new Rule(n_META_OR_CONCRETE_dim_expr, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_explicit_constructor_invocation));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_explicit_constructor_invocation, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation));
		g.addRule(new Rule(n_META_OR_CONCRETE_explicit_constructor_invocation, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_field_declaration, n_field_declaration));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_field_declaration, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_field_declaration, n_META_OR_CONCRETE_NO_GAP_field_declaration));
		g.addRule(new Rule(n_META_OR_CONCRETE_field_declaration, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_field_declarator_id, n_field_declarator_id));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_field_declarator_id, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_field_declarator_id, n_META_OR_CONCRETE_NO_GAP_field_declarator_id));
		g.addRule(new Rule(n_META_OR_CONCRETE_field_declarator_id, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_finally, n_finally));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_finally, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_finally, n_META_OR_CONCRETE_NO_GAP_finally));
		g.addRule(new Rule(n_META_OR_CONCRETE_finally, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_floating_point_type, n_floating_point_type));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_floating_point_type, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_floating_point_type, n_META_OR_CONCRETE_NO_GAP_floating_point_type));
		g.addRule(new Rule(n_META_OR_CONCRETE_floating_point_type, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_formal_parameter, n_formal_parameter));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_formal_parameter, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_formal_parameter, n_META_OR_CONCRETE_NO_GAP_formal_parameter));
		g.addRule(new Rule(n_META_OR_CONCRETE_formal_parameter, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_interface_declaration, n_interface_declaration));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_interface_declaration, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_interface_declaration, n_META_OR_CONCRETE_NO_GAP_interface_declaration));
		g.addRule(new Rule(n_META_OR_CONCRETE_interface_declaration, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_local_variable_declaration, n_local_variable_declaration));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_local_variable_declaration, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_local_variable_declaration, n_META_OR_CONCRETE_NO_GAP_local_variable_declaration));
		g.addRule(new Rule(n_META_OR_CONCRETE_local_variable_declaration, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_method_header, n_method_header));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_method_header, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_method_header, n_META_OR_CONCRETE_NO_GAP_method_header));
		g.addRule(new Rule(n_META_OR_CONCRETE_method_header, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_method_invocation, n_method_invocation));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_method_invocation, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_method_invocation, n_META_OR_CONCRETE_NO_GAP_method_invocation));
		g.addRule(new Rule(n_META_OR_CONCRETE_method_invocation, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_modifier, n_modifier));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_modifier, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_modifier, n_META_OR_CONCRETE_NO_GAP_modifier));
		g.addRule(new Rule(n_META_OR_CONCRETE_modifier, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_package_declaration, n_package_declaration));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_package_declaration, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_package_declaration, n_META_OR_CONCRETE_NO_GAP_package_declaration));
		g.addRule(new Rule(n_META_OR_CONCRETE_package_declaration, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_postdecrement_expression, n_postdecrement_expression));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_postdecrement_expression, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_postdecrement_expression, n_META_OR_CONCRETE_NO_GAP_postdecrement_expression));
		g.addRule(new Rule(n_META_OR_CONCRETE_postdecrement_expression, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_postincrement_expression, n_postincrement_expression));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_postincrement_expression, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_postincrement_expression, n_META_OR_CONCRETE_NO_GAP_postincrement_expression));
		g.addRule(new Rule(n_META_OR_CONCRETE_postincrement_expression, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_predecrement_expression, n_predecrement_expression));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_predecrement_expression, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_predecrement_expression, n_META_OR_CONCRETE_NO_GAP_predecrement_expression));
		g.addRule(new Rule(n_META_OR_CONCRETE_predecrement_expression, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_preincrement_expression, n_preincrement_expression));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_preincrement_expression, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_preincrement_expression, n_META_OR_CONCRETE_NO_GAP_preincrement_expression));
		g.addRule(new Rule(n_META_OR_CONCRETE_preincrement_expression, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_qualified_name_decl, n_qualified_name_decl));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_qualified_name_decl, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_qualified_name_decl, n_META_OR_CONCRETE_NO_GAP_qualified_name_decl));
		g.addRule(new Rule(n_META_OR_CONCRETE_qualified_name_decl, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_simple_name, n_simple_name));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_simple_name, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_simple_name, n_META_OR_CONCRETE_NO_GAP_simple_name));
		g.addRule(new Rule(n_META_OR_CONCRETE_simple_name, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_statement_expression, n_statement_expression));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_statement_expression, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_statement_expression, n_META_OR_CONCRETE_NO_GAP_statement_expression));
		g.addRule(new Rule(n_META_OR_CONCRETE_statement_expression, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_super, n_super));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_super, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_super, n_META_OR_CONCRETE_NO_GAP_super));
		g.addRule(new Rule(n_META_OR_CONCRETE_super, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_switch_block, n_switch_block));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_switch_block, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_switch_block, n_META_OR_CONCRETE_NO_GAP_switch_block));
		g.addRule(new Rule(n_META_OR_CONCRETE_switch_block, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_switch_label, n_switch_label));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_switch_label, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_switch_label, n_META_OR_CONCRETE_NO_GAP_switch_label));
		g.addRule(new Rule(n_META_OR_CONCRETE_switch_label, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_type_import_on_demand_declaration, n_type_import_on_demand_declaration));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_type_import_on_demand_declaration, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_type_import_on_demand_declaration, n_META_OR_CONCRETE_NO_GAP_type_import_on_demand_declaration));
		g.addRule(new Rule(n_META_OR_CONCRETE_type_import_on_demand_declaration, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_variable_declarator_id, n_variable_declarator_id));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_variable_declarator_id, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_variable_declarator_id, n_META_OR_CONCRETE_NO_GAP_variable_declarator_id));
		g.addRule(new Rule(n_META_OR_CONCRETE_variable_declarator_id, t_GAP));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_wrapped_name, n_wrapped_name));
		g.addRule(new Rule(n_META_OR_CONCRETE_NO_GAP_wrapped_name, t_METAVARID));
		g.addRule(new Rule(n_META_OR_CONCRETE_wrapped_name, n_META_OR_CONCRETE_NO_GAP_wrapped_name));
		g.addRule(new Rule(n_META_OR_CONCRETE_wrapped_name, t_GAP));
	}

	public static boolean isTrivialRule(final String signature) {
		switch (signature) {
		case "class_body_declaration.constructor_declaration": return true;
		case "class_body_declaration.static_initializer": return true;
		case "class_body_declaration.instance_initializer": return true;
		case "class_body_declaration.class_member_declaration": return true;
		case "statement.for_statement": return true;
		case "statement.while_statement": return true;
		case "statement.if_then_else_statement": return true;
		case "statement.if_then_statement": return true;
		case "statement.labeled_statement": return true;
		case "statement.statement_without_trailing_substatement": return true;
		case "goal.compilation_unit": return true;
		case "type.reference_type": return true;
		case "type.primitive_type": return true;
		case "primitive_type.numeric_type": return true;
		case "numeric_type.META_OR_CONCRETE_floating_point_type": return true;
		case "numeric_type.integral_type": return true;
		case "reference_type.array_type": return true;
		case "reference_type.class_or_interface_type": return true;
		case "class_or_interface_type.name": return true;
		case "class_type.class_or_interface_type": return true;
		case "interface_type.class_or_interface_type": return true;
		case "name.qualified_name": return true;
		case "name.META_OR_CONCRETE_simple_name": return true;
		case "doc_comment_list.doc_comment": return true;
		case "package_with_comment.META_OR_CONCRETE_package_declaration": return true;
		case "package_with_comment.doc_comment_list.META_OR_CONCRETE_package_declaration": return true;
		case "name_decl.META_OR_CONCRETE_qualified_name_decl": return true;
		case "name_decl.simple_name_decl": return true;
		case "import_with_comment.import_declaration": return true;
		case "import_with_comment.doc_comment_list.import_declaration": return true;
		case "import_declaration.META_OR_CONCRETE_type_import_on_demand_declaration": return true;
		case "import_declaration.single_type_import_declaration": return true;
		case "type_with_comment.type_declaration": return true;
		case "type_declaration.META_OR_CONCRETE_interface_declaration": return true;
		case "type_declaration.META_OR_CONCRETE_class_declaration": return true;
		case "body_decl_with_comment.class_body_declaration": return true;
		case "class_member_declaration.method_declaration": return true;
		case "class_member_declaration.META_OR_CONCRETE_field_declaration": return true;
		case "field_declarator.META_OR_CONCRETE_field_declarator_id": return true;
		case "variable_initializer.META_OR_CONCRETE_array_initializer": return true;
		case "variable_initializer.expression": return true;
		case "interface_member_with_comment.interface_member_declaration": return true;
		case "interface_member_declaration.abstract_method_declaration": return true;
		case "interface_member_declaration.constant_declaration": return true;
		case "constant_declaration.META_OR_CONCRETE_field_declaration": return true;
		case "block_statement.statement": return true;
		case "block_statement.local_variable_declaration_statement": return true;
		case "variable_declarator.META_OR_CONCRETE_variable_declarator_id": return true;
		case "statement_without_trailing_substatement.assert_statement": return true;
		case "statement_without_trailing_substatement.try_statement": return true;
		case "statement_without_trailing_substatement.throw_statement": return true;
		case "statement_without_trailing_substatement.synchronized_statement": return true;
		case "statement_without_trailing_substatement.return_statement": return true;
		case "statement_without_trailing_substatement.continue_statement": return true;
		case "statement_without_trailing_substatement.break_statement": return true;
		case "statement_without_trailing_substatement.do_statement": return true;
		case "statement_without_trailing_substatement.switch_statement": return true;
		case "statement_without_trailing_substatement.expression_statement": return true;
		case "statement_without_trailing_substatement.empty_statement": return true;
		case "statement_without_trailing_substatement.META_OR_CONCRETE_block": return true;
		case "statement_no_short_if.for_statement_no_short_if": return true;
		case "statement_no_short_if.while_statement_no_short_if": return true;
		case "statement_no_short_if.if_then_else_statement_no_short_if": return true;
		case "statement_no_short_if.labeled_statement_no_short_if": return true;
		case "statement_no_short_if.statement_without_trailing_substatement": return true;
		case "for_init.statement_expression_list": return true;
		case "for_update.statement_expression_list": return true;
		case "primary.array_creation_uninit": return true;
		case "primary.array_creation_init": return true;
		case "primary.primary_no_new_array": return true;
		case "primary_no_new_array.array_access": return true;
		case "primary_no_new_array.META_OR_CONCRETE_method_invocation": return true;
		case "primary_no_new_array.field_access": return true;
		case "primary_no_new_array.META_OR_CONCRETE_class_instance_creation_expression": return true;
		case "primary_no_new_array.literal": return true;
		case "postfix_expression.META_OR_CONCRETE_postdecrement_expression": return true;
		case "postfix_expression.META_OR_CONCRETE_postincrement_expression": return true;
		case "postfix_expression.name": return true;
		case "postfix_expression.primary": return true;
		case "unary_expression.unary_expression_not_plus_minus": return true;
		case "unary_expression.META_OR_CONCRETE_predecrement_expression": return true;
		case "unary_expression.META_OR_CONCRETE_preincrement_expression": return true;
		case "unary_expression_not_plus_minus.cast_expression": return true;
		case "unary_expression_not_plus_minus.postfix_expression": return true;
		case "multiplicative_expression.unary_expression": return true;
		case "additive_expression.multiplicative_expression": return true;
		case "shift_expression.additive_expression": return true;
		case "relational_expression.shift_expression": return true;
		case "equality_expression.relational_expression": return true;
		case "and_expression.equality_expression": return true;
		case "exclusive_or_expression.and_expression": return true;
		case "inclusive_or_expression.exclusive_or_expression": return true;
		case "conditional_and_expression.inclusive_or_expression": return true;
		case "conditional_or_expression.conditional_and_expression": return true;
		case "conditional_expression.conditional_or_expression": return true;
		case "assignment_expression.META_OR_CONCRETE_assignment": return true;
		case "assignment_expression.conditional_expression": return true;
		case "expression.assignment_expression": return true;
		case "constant_expression.expression": return true;
		case "META_OR_CONCRETE_NO_GAP_array_initializer.array_initializer": return true;
		case "META_OR_CONCRETE_array_initializer.META_OR_CONCRETE_NO_GAP_array_initializer": return true;
		case "META_OR_CONCRETE_NO_GAP_assignment.assignment": return true;
		case "META_OR_CONCRETE_assignment.META_OR_CONCRETE_NO_GAP_assignment": return true;
		case "META_OR_CONCRETE_NO_GAP_block.block": return true;
		case "META_OR_CONCRETE_block.META_OR_CONCRETE_NO_GAP_block": return true;
		case "META_OR_CONCRETE_NO_GAP_catch_clause.catch_clause": return true;
		case "META_OR_CONCRETE_catch_clause.META_OR_CONCRETE_NO_GAP_catch_clause": return true;
		case "META_OR_CONCRETE_NO_GAP_class_declaration.class_declaration": return true;
		case "META_OR_CONCRETE_class_declaration.META_OR_CONCRETE_NO_GAP_class_declaration": return true;
		case "META_OR_CONCRETE_NO_GAP_class_instance_creation_expression.class_instance_creation_expression": return true;
		case "META_OR_CONCRETE_class_instance_creation_expression.META_OR_CONCRETE_NO_GAP_class_instance_creation_expression": return true;
		case "META_OR_CONCRETE_NO_GAP_class_literal.class_literal": return true;
		case "META_OR_CONCRETE_class_literal.META_OR_CONCRETE_NO_GAP_class_literal": return true;
		case "META_OR_CONCRETE_NO_GAP_dim_expr.dim_expr": return true;
		case "META_OR_CONCRETE_dim_expr.META_OR_CONCRETE_NO_GAP_dim_expr": return true;
		case "META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation.explicit_constructor_invocation": return true;
		case "META_OR_CONCRETE_explicit_constructor_invocation.META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation": return true;
		case "META_OR_CONCRETE_NO_GAP_field_declaration.field_declaration": return true;
		case "META_OR_CONCRETE_field_declaration.META_OR_CONCRETE_NO_GAP_field_declaration": return true;
		case "META_OR_CONCRETE_NO_GAP_field_declarator_id.field_declarator_id": return true;
		case "META_OR_CONCRETE_field_declarator_id.META_OR_CONCRETE_NO_GAP_field_declarator_id": return true;
		case "META_OR_CONCRETE_NO_GAP_finally.finally": return true;
		case "META_OR_CONCRETE_finally.META_OR_CONCRETE_NO_GAP_finally": return true;
		case "META_OR_CONCRETE_NO_GAP_floating_point_type.floating_point_type": return true;
		case "META_OR_CONCRETE_floating_point_type.META_OR_CONCRETE_NO_GAP_floating_point_type": return true;
		case "META_OR_CONCRETE_NO_GAP_formal_parameter.formal_parameter": return true;
		case "META_OR_CONCRETE_formal_parameter.META_OR_CONCRETE_NO_GAP_formal_parameter": return true;
		case "META_OR_CONCRETE_NO_GAP_interface_declaration.interface_declaration": return true;
		case "META_OR_CONCRETE_interface_declaration.META_OR_CONCRETE_NO_GAP_interface_declaration": return true;
		case "META_OR_CONCRETE_NO_GAP_local_variable_declaration.local_variable_declaration": return true;
		case "META_OR_CONCRETE_local_variable_declaration.META_OR_CONCRETE_NO_GAP_local_variable_declaration": return true;
		case "META_OR_CONCRETE_NO_GAP_method_header.method_header": return true;
		case "META_OR_CONCRETE_method_header.META_OR_CONCRETE_NO_GAP_method_header": return true;
		case "META_OR_CONCRETE_NO_GAP_method_invocation.method_invocation": return true;
		case "META_OR_CONCRETE_method_invocation.META_OR_CONCRETE_NO_GAP_method_invocation": return true;
		case "META_OR_CONCRETE_NO_GAP_modifier.modifier": return true;
		case "META_OR_CONCRETE_modifier.META_OR_CONCRETE_NO_GAP_modifier": return true;
		case "META_OR_CONCRETE_NO_GAP_package_declaration.package_declaration": return true;
		case "META_OR_CONCRETE_package_declaration.META_OR_CONCRETE_NO_GAP_package_declaration": return true;
		case "META_OR_CONCRETE_NO_GAP_postdecrement_expression.postdecrement_expression": return true;
		case "META_OR_CONCRETE_postdecrement_expression.META_OR_CONCRETE_NO_GAP_postdecrement_expression": return true;
		case "META_OR_CONCRETE_NO_GAP_postincrement_expression.postincrement_expression": return true;
		case "META_OR_CONCRETE_postincrement_expression.META_OR_CONCRETE_NO_GAP_postincrement_expression": return true;
		case "META_OR_CONCRETE_NO_GAP_predecrement_expression.predecrement_expression": return true;
		case "META_OR_CONCRETE_predecrement_expression.META_OR_CONCRETE_NO_GAP_predecrement_expression": return true;
		case "META_OR_CONCRETE_NO_GAP_preincrement_expression.preincrement_expression": return true;
		case "META_OR_CONCRETE_preincrement_expression.META_OR_CONCRETE_NO_GAP_preincrement_expression": return true;
		case "META_OR_CONCRETE_NO_GAP_qualified_name_decl.qualified_name_decl": return true;
		case "META_OR_CONCRETE_qualified_name_decl.META_OR_CONCRETE_NO_GAP_qualified_name_decl": return true;
		case "META_OR_CONCRETE_NO_GAP_simple_name.simple_name": return true;
		case "META_OR_CONCRETE_simple_name.META_OR_CONCRETE_NO_GAP_simple_name": return true;
		case "META_OR_CONCRETE_NO_GAP_statement_expression.statement_expression": return true;
		case "META_OR_CONCRETE_statement_expression.META_OR_CONCRETE_NO_GAP_statement_expression": return true;
		case "META_OR_CONCRETE_NO_GAP_super.super": return true;
		case "META_OR_CONCRETE_super.META_OR_CONCRETE_NO_GAP_super": return true;
		case "META_OR_CONCRETE_NO_GAP_switch_block.switch_block": return true;
		case "META_OR_CONCRETE_switch_block.META_OR_CONCRETE_NO_GAP_switch_block": return true;
		case "META_OR_CONCRETE_NO_GAP_switch_label.switch_label": return true;
		case "META_OR_CONCRETE_switch_label.META_OR_CONCRETE_NO_GAP_switch_label": return true;
		case "META_OR_CONCRETE_NO_GAP_type_import_on_demand_declaration.type_import_on_demand_declaration": return true;
		case "META_OR_CONCRETE_type_import_on_demand_declaration.META_OR_CONCRETE_NO_GAP_type_import_on_demand_declaration": return true;
		case "META_OR_CONCRETE_NO_GAP_variable_declarator_id.variable_declarator_id": return true;
		case "META_OR_CONCRETE_variable_declarator_id.META_OR_CONCRETE_NO_GAP_variable_declarator_id": return true;
		case "META_OR_CONCRETE_NO_GAP_wrapped_name.wrapped_name": return true;
		case "META_OR_CONCRETE_wrapped_name.META_OR_CONCRETE_NO_GAP_wrapped_name": return true;
		default: return false;
		}
	}
}
