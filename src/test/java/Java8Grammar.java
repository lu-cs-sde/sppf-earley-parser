import se.lth.sep.Category;
import se.lth.sep.Grammar;
import se.lth.sep.SemanticAction;
public class Java8Grammar {

static public class Terminals {
static public final short EOF = 0;
static public final short ABSTRACT = 1;
static public final short AND = 2;
static public final short ANDAND = 3;
static public final short ANDEQ = 4;
static public final short ASSERT = 5;
static public final short AT = 6;
static public final short BOOLEAN = 7;
static public final short BOOLEAN_LITERAL = 8;
static public final short BREAK = 9;
static public final short BYTE = 10;
static public final short CASE = 11;
static public final short CATCH = 12;
static public final short CHAR = 13;
static public final short CHARACTER_LITERAL = 14;
static public final short CLASS = 15;
static public final short COLON = 16;
static public final short COMMA = 17;
static public final short COMP = 18;
static public final short CONTINUE = 19;
static public final short DEFAULT = 20;
static public final short DIV = 21;
static public final short DIVEQ = 22;
static public final short DO = 23;
static public final short DOCUMENTATION_COMMENT = 24;
static public final short DOT = 25;
static public final short DOUBLE = 26;
static public final short DOUBLECOLON = 27;
static public final short ELLIPSIS = 28;
static public final short ELSE = 29;
static public final short ENUM = 30;
static public final short EQ = 31;
static public final short EQEQ = 32;
static public final short EXTENDS = 33;
static public final short FINAL = 34;
static public final short FINALLY = 35;
static public final short FLOAT = 36;
static public final short FOR = 37;
static public final short GAP = 38;
static public final short GT = 39;
static public final short GTEQ = 40;
static public final short IDENTIFIER = 41;
static public final short IF = 42;
static public final short IMPLEMENTS = 43;
static public final short IMPORT = 44;
static public final short INSTANCEOF = 45;
static public final short INT = 46;
static public final short INTERFACE = 47;
static public final short LBRACE = 48;
static public final short LBRACK = 49;
static public final short LONG = 50;
static public final short LPAREN = 51;
static public final short LSHIFT = 52;
static public final short LSHIFTEQ = 53;
static public final short LT = 54;
static public final short LTEQ = 55;
static public final short METAVARID = 56;
static public final short MINUS = 57;
static public final short MINUSEQ = 58;
static public final short MINUSMINUS = 59;
static public final short MOD = 60;
static public final short MODEQ = 61;
static public final short MULT = 62;
static public final short MULTEQ = 63;
static public final short NATIVE = 64;
static public final short NEW = 65;
static public final short NOT = 66;
static public final short NOTEQ = 67;
static public final short NULL_LITERAL = 68;
static public final short NUMERIC_LITERAL = 69;
static public final short OR = 70;
static public final short OREQ = 71;
static public final short OROR = 72;
static public final short PACKAGE = 73;
static public final short PLUS = 74;
static public final short PLUSEQ = 75;
static public final short PLUSPLUS = 76;
static public final short PRIVATE = 77;
static public final short PROTECTED = 78;
static public final short PUBLIC = 79;
static public final short QUESTION = 80;
static public final short RARROW = 81;
static public final short RBRACE = 82;
static public final short RBRACK = 83;
static public final short RETURN = 84;
static public final short RPAREN = 85;
static public final short RSHIFTEQ = 86;
static public final short SEMICOLON = 87;
static public final short SHORT = 88;
static public final short STATIC = 89;
static public final short STRICTFP = 90;
static public final short STRING_LITERAL = 91;
static public final short SUPER = 92;
static public final short SWITCH = 93;
static public final short SYNCHRONIZED = 94;
static public final short THIS = 95;
static public final short THROW = 96;
static public final short THROWS = 97;
static public final short TRANSIENT = 98;
static public final short TRY = 99;
static public final short URSHIFTEQ = 100;
static public final short VOID = 101;
static public final short VOLATILE = 102;
static public final short WHILE = 103;
static public final short XOR = 104;
static public final short XOREQ = 105;
static public final short error = 106;

static public final String[] NAMES = {
"EOF"
,
"ABSTRACT",
"AND",
"ANDAND",
"ANDEQ",
"ASSERT",
"AT",
"BOOLEAN",
"BOOLEAN_LITERAL",
"BREAK",
"BYTE",
"CASE",
"CATCH",
"CHAR",
"CHARACTER_LITERAL",
"CLASS",
"COLON",
"COMMA",
"COMP",
"CONTINUE",
"DEFAULT",
"DIV",
"DIVEQ",
"DO",
"DOCUMENTATION_COMMENT",
"DOT",
"DOUBLE",
"DOUBLECOLON",
"ELLIPSIS",
"ELSE",
"ENUM",
"EQ",
"EQEQ",
"EXTENDS",
"FINAL",
"FINALLY",
"FLOAT",
"FOR",
"GAP",
"GT",
"GTEQ",
"IDENTIFIER",
"IF",
"IMPLEMENTS",
"IMPORT",
"INSTANCEOF",
"INT",
"INTERFACE",
"LBRACE",
"LBRACK",
"LONG",
"LPAREN",
"LSHIFT",
"LSHIFTEQ",
"LT",
"LTEQ",
"METAVARID",
"MINUS",
"MINUSEQ",
"MINUSMINUS",
"MOD",
"MODEQ",
"MULT",
"MULTEQ",
"NATIVE",
"NEW",
"NOT",
"NOTEQ",
"NULL_LITERAL",
"NUMERIC_LITERAL",
"OR",
"OREQ",
"OROR",
"PACKAGE",
"PLUS",
"PLUSEQ",
"PLUSPLUS",
"PRIVATE",
"PROTECTED",
"PUBLIC",
"QUESTION",
"RARROW",
"RBRACE",
"RBRACK",
"RETURN",
"RPAREN",
"RSHIFTEQ",
"SEMICOLON",
"SHORT",
"STATIC",
"STRICTFP",
"STRING_LITERAL",
"SUPER",
"SWITCH",
"SYNCHRONIZED",
"THIS",
"THROW",
"THROWS",
"TRANSIENT",
"TRY",
"URSHIFTEQ",
"VOID",
"VOLATILE",
"WHILE",
"XOR",
"XOREQ",
"error"};
}

public static Category t_NULL_LITERAL = new Category("NULL_LITERAL", /*terminal*/ true);
public static Category t_STRING_LITERAL = new Category("STRING_LITERAL", /*terminal*/ true);
public static Category t_CHARACTER_LITERAL = new Category("CHARACTER_LITERAL", /*terminal*/ true);
public static Category t_BOOLEAN_LITERAL = new Category("BOOLEAN_LITERAL", /*terminal*/ true);
public static Category t_NUMERIC_LITERAL = new Category("NUMERIC_LITERAL", /*terminal*/ true);
public static Category t_BOOLEAN = new Category("BOOLEAN", /*terminal*/ true);
public static Category t_CHAR = new Category("CHAR", /*terminal*/ true);
public static Category t_LONG = new Category("LONG", /*terminal*/ true);
public static Category t_INT = new Category("INT", /*terminal*/ true);
public static Category t_SHORT = new Category("SHORT", /*terminal*/ true);
public static Category t_BYTE = new Category("BYTE", /*terminal*/ true);
public static Category t_DOUBLE = new Category("DOUBLE", /*terminal*/ true);
public static Category t_FLOAT = new Category("FLOAT", /*terminal*/ true);
public static Category t_LT = new Category("LT", /*terminal*/ true);
public static Category t_GT = new Category("GT", /*terminal*/ true);
public static Category t_DOT = new Category("DOT", /*terminal*/ true);
public static Category t_SEMICOLON = new Category("SEMICOLON", /*terminal*/ true);
public static Category t_DOCUMENTATION_COMMENT = new Category("DOCUMENTATION_COMMENT", /*terminal*/ true);
public static Category t_PACKAGE = new Category("PACKAGE", /*terminal*/ true);
public static Category t_IMPORT = new Category("IMPORT", /*terminal*/ true);
public static Category t_MULT = new Category("MULT", /*terminal*/ true);
public static Category t_STRICTFP = new Category("STRICTFP", /*terminal*/ true);
public static Category t_VOLATILE = new Category("VOLATILE", /*terminal*/ true);
public static Category t_TRANSIENT = new Category("TRANSIENT", /*terminal*/ true);
public static Category t_SYNCHRONIZED = new Category("SYNCHRONIZED", /*terminal*/ true);
public static Category t_NATIVE = new Category("NATIVE", /*terminal*/ true);
public static Category t_FINAL = new Category("FINAL", /*terminal*/ true);
public static Category t_ABSTRACT = new Category("ABSTRACT", /*terminal*/ true);
public static Category t_STATIC = new Category("STATIC", /*terminal*/ true);
public static Category t_PRIVATE = new Category("PRIVATE", /*terminal*/ true);
public static Category t_PROTECTED = new Category("PROTECTED", /*terminal*/ true);
public static Category t_PUBLIC = new Category("PUBLIC", /*terminal*/ true);
public static Category t_DEFAULT = new Category("DEFAULT", /*terminal*/ true);
public static Category t_CLASS = new Category("CLASS", /*terminal*/ true);
public static Category t_EXTENDS = new Category("EXTENDS", /*terminal*/ true);
public static Category t_IMPLEMENTS = new Category("IMPLEMENTS", /*terminal*/ true);
public static Category t_COMMA = new Category("COMMA", /*terminal*/ true);
public static Category t_LBRACE = new Category("LBRACE", /*terminal*/ true);
public static Category t_RBRACE = new Category("RBRACE", /*terminal*/ true);
public static Category t_error = new Category("error", /*terminal*/ true);
public static Category t_EQ = new Category("EQ", /*terminal*/ true);
public static Category t_VOID = new Category("VOID", /*terminal*/ true);
public static Category t_LPAREN = new Category("LPAREN", /*terminal*/ true);
public static Category t_RPAREN = new Category("RPAREN", /*terminal*/ true);
public static Category t_ELLIPSIS = new Category("ELLIPSIS", /*terminal*/ true);
public static Category t_THROWS = new Category("THROWS", /*terminal*/ true);
public static Category t_SUPER = new Category("SUPER", /*terminal*/ true);
public static Category t_THIS = new Category("THIS", /*terminal*/ true);
public static Category t_INTERFACE = new Category("INTERFACE", /*terminal*/ true);
public static Category t_IF = new Category("IF", /*terminal*/ true);
public static Category t_ELSE = new Category("ELSE", /*terminal*/ true);
public static Category t_COLON = new Category("COLON", /*terminal*/ true);
public static Category t_SWITCH = new Category("SWITCH", /*terminal*/ true);
public static Category t_CASE = new Category("CASE", /*terminal*/ true);
public static Category t_WHILE = new Category("WHILE", /*terminal*/ true);
public static Category t_DO = new Category("DO", /*terminal*/ true);
public static Category t_FOR = new Category("FOR", /*terminal*/ true);
public static Category t_BREAK = new Category("BREAK", /*terminal*/ true);
public static Category t_CONTINUE = new Category("CONTINUE", /*terminal*/ true);
public static Category t_RETURN = new Category("RETURN", /*terminal*/ true);
public static Category t_THROW = new Category("THROW", /*terminal*/ true);
public static Category t_TRY = new Category("TRY", /*terminal*/ true);
public static Category t_CATCH = new Category("CATCH", /*terminal*/ true);
public static Category t_FINALLY = new Category("FINALLY", /*terminal*/ true);
public static Category t_ASSERT = new Category("ASSERT", /*terminal*/ true);
public static Category t_NEW = new Category("NEW", /*terminal*/ true);
public static Category t_LBRACK = new Category("LBRACK", /*terminal*/ true);
public static Category t_RBRACK = new Category("RBRACK", /*terminal*/ true);
public static Category t_PLUSPLUS = new Category("PLUSPLUS", /*terminal*/ true);
public static Category t_MINUSMINUS = new Category("MINUSMINUS", /*terminal*/ true);
public static Category t_MINUS = new Category("MINUS", /*terminal*/ true);
public static Category t_PLUS = new Category("PLUS", /*terminal*/ true);
public static Category t_NOT = new Category("NOT", /*terminal*/ true);
public static Category t_COMP = new Category("COMP", /*terminal*/ true);
public static Category t_MOD = new Category("MOD", /*terminal*/ true);
public static Category t_DIV = new Category("DIV", /*terminal*/ true);
public static Category t_LSHIFT = new Category("LSHIFT", /*terminal*/ true);
public static Category t_GTEQ = new Category("GTEQ", /*terminal*/ true);
public static Category t_LTEQ = new Category("LTEQ", /*terminal*/ true);
public static Category t_NOTEQ = new Category("NOTEQ", /*terminal*/ true);
public static Category t_EQEQ = new Category("EQEQ", /*terminal*/ true);
public static Category t_AND = new Category("AND", /*terminal*/ true);
public static Category t_XOR = new Category("XOR", /*terminal*/ true);
public static Category t_OR = new Category("OR", /*terminal*/ true);
public static Category t_ANDAND = new Category("ANDAND", /*terminal*/ true);
public static Category t_OROR = new Category("OROR", /*terminal*/ true);
public static Category t_QUESTION = new Category("QUESTION", /*terminal*/ true);
public static Category t_OREQ = new Category("OREQ", /*terminal*/ true);
public static Category t_XOREQ = new Category("XOREQ", /*terminal*/ true);
public static Category t_ANDEQ = new Category("ANDEQ", /*terminal*/ true);
public static Category t_URSHIFTEQ = new Category("URSHIFTEQ", /*terminal*/ true);
public static Category t_RSHIFTEQ = new Category("RSHIFTEQ", /*terminal*/ true);
public static Category t_LSHIFTEQ = new Category("LSHIFTEQ", /*terminal*/ true);
public static Category t_MINUSEQ = new Category("MINUSEQ", /*terminal*/ true);
public static Category t_PLUSEQ = new Category("PLUSEQ", /*terminal*/ true);
public static Category t_MODEQ = new Category("MODEQ", /*terminal*/ true);
public static Category t_DIVEQ = new Category("DIVEQ", /*terminal*/ true);
public static Category t_MULTEQ = new Category("MULTEQ", /*terminal*/ true);
public static Category t_INSTANCEOF = new Category("INSTANCEOF", /*terminal*/ true);
public static Category t_AT = new Category("AT", /*terminal*/ true);
public static Category t_DOUBLECOLON = new Category("DOUBLECOLON", /*terminal*/ true);
public static Category t_ENUM = new Category("ENUM", /*terminal*/ true);
public static Category t_RARROW = new Category("RARROW", /*terminal*/ true);
public static Category t_METAVARID = new Category("METAVARID", /*terminal*/ true);
public static Category t_GAP = new Category("GAP", /*terminal*/ true);
public static Category t_IDENTIFIER = new Category("IDENTIFIER", /*terminal*/ true);

public static Category n_goal = new Category("goal", /*terminal*/ false);
public static Category n_literal = new Category("literal", /*terminal*/ false);
public static Category n_type = new Category("type", /*terminal*/ false);
public static Category n_primitive_type = new Category("primitive_type", /*terminal*/ false);
public static Category n_numeric_type = new Category("numeric_type", /*terminal*/ false);
public static Category n_integral_type = new Category("integral_type", /*terminal*/ false);
public static Category n_floating_point_type = new Category("floating_point_type", /*terminal*/ false);
public static Category n_reference_type = new Category("reference_type", /*terminal*/ false);
public static Category n_class_or_interface_type = new Category("class_or_interface_type", /*terminal*/ false);
public static Category n_class_type = new Category("class_type", /*terminal*/ false);
public static Category n_interface_type = new Category("interface_type", /*terminal*/ false);
public static Category n_array_type = new Category("array_type", /*terminal*/ false);
public static Category n_name = new Category("name", /*terminal*/ false);
public static Category n_simple_name = new Category("simple_name", /*terminal*/ false);
public static Category n_qualified_name = new Category("qualified_name", /*terminal*/ false);
public static Category n_compilation_unit = new Category("compilation_unit", /*terminal*/ false);
public static Category n_import_declarations = new Category("import_declarations", /*terminal*/ false);
public static Category n_type_declarations = new Category("type_declarations", /*terminal*/ false);
public static Category n_doc_comment = new Category("doc_comment", /*terminal*/ false);
public static Category n_doc_comment_list = new Category("doc_comment_list", /*terminal*/ false);
public static Category n_package_with_comment = new Category("package_with_comment", /*terminal*/ false);
public static Category n_package_declaration = new Category("package_declaration", /*terminal*/ false);
public static Category n_name_decl = new Category("name_decl", /*terminal*/ false);
public static Category n_simple_name_decl = new Category("simple_name_decl", /*terminal*/ false);
public static Category n_qualified_name_decl = new Category("qualified_name_decl", /*terminal*/ false);
public static Category n_import_with_comment = new Category("import_with_comment", /*terminal*/ false);
public static Category n_import_declaration = new Category("import_declaration", /*terminal*/ false);
public static Category n_single_type_import_declaration = new Category("single_type_import_declaration", /*terminal*/ false);
public static Category n_type_import_on_demand_declaration = new Category("type_import_on_demand_declaration", /*terminal*/ false);
public static Category n_type_with_comment = new Category("type_with_comment", /*terminal*/ false);
public static Category n_type_declaration = new Category("type_declaration", /*terminal*/ false);
public static Category n_modifiers = new Category("modifiers", /*terminal*/ false);
public static Category n_modifier = new Category("modifier", /*terminal*/ false);
public static Category n_class_declaration = new Category("class_declaration", /*terminal*/ false);
public static Category n_super = new Category("super", /*terminal*/ false);
public static Category n_interfaces = new Category("interfaces", /*terminal*/ false);
public static Category n_interface_type_list = new Category("interface_type_list", /*terminal*/ false);
public static Category n_class_body = new Category("class_body", /*terminal*/ false);
public static Category n_class_body_declarations = new Category("class_body_declarations", /*terminal*/ false);
public static Category n_body_decl_with_comment = new Category("body_decl_with_comment", /*terminal*/ false);
public static Category n_class_body_declaration = new Category("class_body_declaration", /*terminal*/ false);
public static Category n_class_member_declaration = new Category("class_member_declaration", /*terminal*/ false);
public static Category n_field_declaration = new Category("field_declaration", /*terminal*/ false);
public static Category n_field_declarators = new Category("field_declarators", /*terminal*/ false);
public static Category n_field_declarator = new Category("field_declarator", /*terminal*/ false);
public static Category n_field_declarator_id = new Category("field_declarator_id", /*terminal*/ false);
public static Category n_variable_initializer = new Category("variable_initializer", /*terminal*/ false);
public static Category n_method_declaration = new Category("method_declaration", /*terminal*/ false);
public static Category n_method_header = new Category("method_header", /*terminal*/ false);
public static Category n_formal_parameter_list = new Category("formal_parameter_list", /*terminal*/ false);
public static Category n_formal_parameter = new Category("formal_parameter", /*terminal*/ false);
public static Category n_throws = new Category("throws", /*terminal*/ false);
public static Category n_class_type_list = new Category("class_type_list", /*terminal*/ false);
public static Category n_static_initializer = new Category("static_initializer", /*terminal*/ false);
public static Category n_instance_initializer = new Category("instance_initializer", /*terminal*/ false);
public static Category n_constructor_declaration = new Category("constructor_declaration", /*terminal*/ false);
public static Category n_explicit_constructor_invocation = new Category("explicit_constructor_invocation", /*terminal*/ false);
public static Category n_interface_declaration = new Category("interface_declaration", /*terminal*/ false);
public static Category n_extends_interfaces = new Category("extends_interfaces", /*terminal*/ false);
public static Category n_interface_body = new Category("interface_body", /*terminal*/ false);
public static Category n_interface_member_declarations = new Category("interface_member_declarations", /*terminal*/ false);
public static Category n_interface_member_with_comment = new Category("interface_member_with_comment", /*terminal*/ false);
public static Category n_interface_member_declaration = new Category("interface_member_declaration", /*terminal*/ false);
public static Category n_constant_declaration = new Category("constant_declaration", /*terminal*/ false);
public static Category n_abstract_method_declaration = new Category("abstract_method_declaration", /*terminal*/ false);
public static Category n_array_initializer = new Category("array_initializer", /*terminal*/ false);
public static Category n_variable_initializers = new Category("variable_initializers", /*terminal*/ false);
public static Category n_block = new Category("block", /*terminal*/ false);
public static Category n_block_statements = new Category("block_statements", /*terminal*/ false);
public static Category n_block_statement = new Category("block_statement", /*terminal*/ false);
public static Category n_local_variable_declaration_statement = new Category("local_variable_declaration_statement", /*terminal*/ false);
public static Category n_local_variable_declaration = new Category("local_variable_declaration", /*terminal*/ false);
public static Category n_variable_declarators = new Category("variable_declarators", /*terminal*/ false);
public static Category n_variable_declarator = new Category("variable_declarator", /*terminal*/ false);
public static Category n_variable_declarator_id = new Category("variable_declarator_id", /*terminal*/ false);
public static Category n_statement = new Category("statement", /*terminal*/ false);
public static Category n_statement_without_trailing_substatement = new Category("statement_without_trailing_substatement", /*terminal*/ false);
public static Category n_statement_no_short_if = new Category("statement_no_short_if", /*terminal*/ false);
public static Category n_if_then_statement = new Category("if_then_statement", /*terminal*/ false);
public static Category n_if_then_else_statement = new Category("if_then_else_statement", /*terminal*/ false);
public static Category n_if_then_else_statement_no_short_if = new Category("if_then_else_statement_no_short_if", /*terminal*/ false);
public static Category n_empty_statement = new Category("empty_statement", /*terminal*/ false);
public static Category n_labeled_statement = new Category("labeled_statement", /*terminal*/ false);
public static Category n_labeled_statement_no_short_if = new Category("labeled_statement_no_short_if", /*terminal*/ false);
public static Category n_expression_statement = new Category("expression_statement", /*terminal*/ false);
public static Category n_statement_expression = new Category("statement_expression", /*terminal*/ false);
public static Category n_switch_statement = new Category("switch_statement", /*terminal*/ false);
public static Category n_switch_block = new Category("switch_block", /*terminal*/ false);
public static Category n_switch_statements = new Category("switch_statements", /*terminal*/ false);
public static Category n_switch_label = new Category("switch_label", /*terminal*/ false);
public static Category n_while_statement = new Category("while_statement", /*terminal*/ false);
public static Category n_while_statement_no_short_if = new Category("while_statement_no_short_if", /*terminal*/ false);
public static Category n_do_statement = new Category("do_statement", /*terminal*/ false);
public static Category n_for_statement = new Category("for_statement", /*terminal*/ false);
public static Category n_for_statement_no_short_if = new Category("for_statement_no_short_if", /*terminal*/ false);
public static Category n_for_init = new Category("for_init", /*terminal*/ false);
public static Category n_for_update = new Category("for_update", /*terminal*/ false);
public static Category n_statement_expression_list = new Category("statement_expression_list", /*terminal*/ false);
public static Category n_break_statement = new Category("break_statement", /*terminal*/ false);
public static Category n_continue_statement = new Category("continue_statement", /*terminal*/ false);
public static Category n_return_statement = new Category("return_statement", /*terminal*/ false);
public static Category n_throw_statement = new Category("throw_statement", /*terminal*/ false);
public static Category n_synchronized_statement = new Category("synchronized_statement", /*terminal*/ false);
public static Category n_try_statement = new Category("try_statement", /*terminal*/ false);
public static Category n_catches = new Category("catches", /*terminal*/ false);
public static Category n_catch_clause = new Category("catch_clause", /*terminal*/ false);
public static Category n_finally = new Category("finally", /*terminal*/ false);
public static Category n_assert_statement = new Category("assert_statement", /*terminal*/ false);
public static Category n_primary = new Category("primary", /*terminal*/ false);
public static Category n_class_literal = new Category("class_literal", /*terminal*/ false);
public static Category n_primary_no_new_array = new Category("primary_no_new_array", /*terminal*/ false);
public static Category n_class_instance_creation_expression = new Category("class_instance_creation_expression", /*terminal*/ false);
public static Category n_argument_list = new Category("argument_list", /*terminal*/ false);
public static Category n_array_creation_uninit = new Category("array_creation_uninit", /*terminal*/ false);
public static Category n_array_creation_init = new Category("array_creation_init", /*terminal*/ false);
public static Category n_dim_exprs = new Category("dim_exprs", /*terminal*/ false);
public static Category n_dim_expr = new Category("dim_expr", /*terminal*/ false);
public static Category n_dims = new Category("dims", /*terminal*/ false);
public static Category n_field_access = new Category("field_access", /*terminal*/ false);
public static Category n_method_invocation = new Category("method_invocation", /*terminal*/ false);
public static Category n_array_access = new Category("array_access", /*terminal*/ false);
public static Category n_postfix_expression = new Category("postfix_expression", /*terminal*/ false);
public static Category n_postincrement_expression = new Category("postincrement_expression", /*terminal*/ false);
public static Category n_postdecrement_expression = new Category("postdecrement_expression", /*terminal*/ false);
public static Category n_unary_expression = new Category("unary_expression", /*terminal*/ false);
public static Category n_preincrement_expression = new Category("preincrement_expression", /*terminal*/ false);
public static Category n_predecrement_expression = new Category("predecrement_expression", /*terminal*/ false);
public static Category n_unary_expression_not_plus_minus = new Category("unary_expression_not_plus_minus", /*terminal*/ false);
public static Category n_cast_expression = new Category("cast_expression", /*terminal*/ false);
public static Category n_multiplicative_expression = new Category("multiplicative_expression", /*terminal*/ false);
public static Category n_additive_expression = new Category("additive_expression", /*terminal*/ false);
public static Category n_shift_expression = new Category("shift_expression", /*terminal*/ false);
public static Category n_relational_expression = new Category("relational_expression", /*terminal*/ false);
public static Category n_equality_expression = new Category("equality_expression", /*terminal*/ false);
public static Category n_and_expression = new Category("and_expression", /*terminal*/ false);
public static Category n_exclusive_or_expression = new Category("exclusive_or_expression", /*terminal*/ false);
public static Category n_inclusive_or_expression = new Category("inclusive_or_expression", /*terminal*/ false);
public static Category n_conditional_and_expression = new Category("conditional_and_expression", /*terminal*/ false);
public static Category n_conditional_or_expression = new Category("conditional_or_expression", /*terminal*/ false);
public static Category n_conditional_expression = new Category("conditional_expression", /*terminal*/ false);
public static Category n_assignment_expression = new Category("assignment_expression", /*terminal*/ false);
public static Category n_assignment = new Category("assignment", /*terminal*/ false);
public static Category n_expression = new Category("expression", /*terminal*/ false);
public static Category n_constant_expression = new Category("constant_expression", /*terminal*/ false);
public static Category n_expression_nn_or_name_fix = new Category("expression_nn_or_name_fix", /*terminal*/ false);
public static Category n_postfix_expression_nn = new Category("postfix_expression_nn", /*terminal*/ false);
public static Category n_unary_expression_nn = new Category("unary_expression_nn", /*terminal*/ false);
public static Category n_unary_expression_not_plus_minus_nn = new Category("unary_expression_not_plus_minus_nn", /*terminal*/ false);
public static Category n_multiplicative_expression_nn = new Category("multiplicative_expression_nn", /*terminal*/ false);
public static Category n_additive_expression_nn = new Category("additive_expression_nn", /*terminal*/ false);
public static Category n_shift_expression_nn = new Category("shift_expression_nn", /*terminal*/ false);
public static Category n_relational_expression_nn = new Category("relational_expression_nn", /*terminal*/ false);
public static Category n_instanceof_expression_nn = new Category("instanceof_expression_nn", /*terminal*/ false);
public static Category n_equality_expression_nn = new Category("equality_expression_nn", /*terminal*/ false);
public static Category n_instanceof_expression = new Category("instanceof_expression", /*terminal*/ false);
public static Category n_and_expression_nn = new Category("and_expression_nn", /*terminal*/ false);
public static Category n_exclusive_or_expression_nn = new Category("exclusive_or_expression_nn", /*terminal*/ false);
public static Category n_inclusive_or_expression_nn = new Category("inclusive_or_expression_nn", /*terminal*/ false);
public static Category n_conditional_and_expression_nn = new Category("conditional_and_expression_nn", /*terminal*/ false);
public static Category n_conditional_or_expression_nn = new Category("conditional_or_expression_nn", /*terminal*/ false);
public static Category n_conditional_expression_nn = new Category("conditional_expression_nn", /*terminal*/ false);
public static Category n_assignment_expression_nn = new Category("assignment_expression_nn", /*terminal*/ false);
public static Category n_expression_nn = new Category("expression_nn", /*terminal*/ false);
public static Category n_class_or_interface = new Category("class_or_interface", /*terminal*/ false);
public static Category n_type_arguments = new Category("type_arguments", /*terminal*/ false);
public static Category n_wildcard = new Category("wildcard", /*terminal*/ false);
public static Category n_type_argument_list = new Category("type_argument_list", /*terminal*/ false);
public static Category n_type_argument = new Category("type_argument", /*terminal*/ false);
public static Category n_type_parameters = new Category("type_parameters", /*terminal*/ false);
public static Category n_type_parameter_list = new Category("type_parameter_list", /*terminal*/ false);
public static Category n_type_parameter = new Category("type_parameter", /*terminal*/ false);
public static Category n_type_bound_list = new Category("type_bound_list", /*terminal*/ false);
public static Category n_annotation_type_declaration = new Category("annotation_type_declaration", /*terminal*/ false);
public static Category n_annotation_type_body = new Category("annotation_type_body", /*terminal*/ false);
public static Category n_annotation_type_element_declarations = new Category("annotation_type_element_declarations", /*terminal*/ false);
public static Category n_annotation_type_element_declaration = new Category("annotation_type_element_declaration", /*terminal*/ false);
public static Category n_default_value = new Category("default_value", /*terminal*/ false);
public static Category n_annotation = new Category("annotation", /*terminal*/ false);
public static Category n_normal_annotation = new Category("normal_annotation", /*terminal*/ false);
public static Category n_element_value_pairs = new Category("element_value_pairs", /*terminal*/ false);
public static Category n_element_value_pair = new Category("element_value_pair", /*terminal*/ false);
public static Category n_element_value = new Category("element_value", /*terminal*/ false);
public static Category n_element_value_array_initializer = new Category("element_value_array_initializer", /*terminal*/ false);
public static Category n_element_values = new Category("element_values", /*terminal*/ false);
public static Category n_marker_annotation = new Category("marker_annotation", /*terminal*/ false);
public static Category n_single_element_annotation = new Category("single_element_annotation", /*terminal*/ false);
public static Category n_single_element_annotation_1 = new Category("single_element_annotation_1", /*terminal*/ false);
public static Category n_single_element_annotation_2 = new Category("single_element_annotation_2", /*terminal*/ false);
public static Category n_constructor_reference = new Category("constructor_reference", /*terminal*/ false);
public static Category n_enhanced_for_statement = new Category("enhanced_for_statement", /*terminal*/ false);
public static Category n_enhanced_for_statement_no_short_if = new Category("enhanced_for_statement_no_short_if", /*terminal*/ false);
public static Category n_enhanced_for_parameter = new Category("enhanced_for_parameter", /*terminal*/ false);
public static Category n_enum_declaration = new Category("enum_declaration", /*terminal*/ false);
public static Category n_enum_body = new Category("enum_body", /*terminal*/ false);
public static Category n_enum_constants = new Category("enum_constants", /*terminal*/ false);
public static Category n_enum_constant = new Category("enum_constant", /*terminal*/ false);
public static Category n_arguments = new Category("arguments", /*terminal*/ false);
public static Category n_annotations = new Category("annotations", /*terminal*/ false);
public static Category n_enum_body_declarations = new Category("enum_body_declarations", /*terminal*/ false);
public static Category n_interface_method_declaration = new Category("interface_method_declaration", /*terminal*/ false);
public static Category n_interface_method_header = new Category("interface_method_header", /*terminal*/ false);
public static Category n_additional_bound_list = new Category("additional_bound_list", /*terminal*/ false);
public static Category n_additional_bound = new Category("additional_bound", /*terminal*/ false);
public static Category n_lambda_expression = new Category("lambda_expression", /*terminal*/ false);
public static Category n_inferred_param_decl = new Category("inferred_param_decl", /*terminal*/ false);
public static Category n_inferred_list = new Category("inferred_list", /*terminal*/ false);
public static Category n_comma_formal_parameter_list = new Category("comma_formal_parameter_list", /*terminal*/ false);
public static Category n_formal_parameter_list_no_vararg_mixed_array = new Category("formal_parameter_list_no_vararg_mixed_array", /*terminal*/ false);
public static Category n_formal_parameter_no_vararg_mixed_array = new Category("formal_parameter_no_vararg_mixed_array", /*terminal*/ false);
public static Category n_lambda_body = new Category("lambda_body", /*terminal*/ false);
public static Category n_method_reference = new Category("method_reference", /*terminal*/ false);
public static Category n_multi_catch_param = new Category("multi_catch_param", /*terminal*/ false);
public static Category n_multi_catch_type = new Category("multi_catch_type", /*terminal*/ false);
public static Category n_nongeneric_type = new Category("nongeneric_type", /*terminal*/ false);
public static Category n_nongeneric_reference_type = new Category("nongeneric_reference_type", /*terminal*/ false);
public static Category n_nongeneric_class_or_interface_type = new Category("nongeneric_class_or_interface_type", /*terminal*/ false);
public static Category n_nongeneric_array_type = new Category("nongeneric_array_type", /*terminal*/ false);
public static Category n_nongeneric_formal_parameter = new Category("nongeneric_formal_parameter", /*terminal*/ false);
public static Category n_single_static_import_declaration = new Category("single_static_import_declaration", /*terminal*/ false);
public static Category n_static_import_on_demand_declaration = new Category("static_import_on_demand_declaration", /*terminal*/ false);
public static Category n_try_with_resource = new Category("try_with_resource", /*terminal*/ false);
public static Category n_resource_declaration_list = new Category("resource_declaration_list", /*terminal*/ false);
public static Category n_resource_declarations = new Category("resource_declarations", /*terminal*/ false);
public static Category n_resource_declaration = new Category("resource_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_abstract_method_declaration = new Category("META_OR_CONCRETE_NO_GAP_abstract_method_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_abstract_method_declaration = new Category("META_OR_CONCRETE_abstract_method_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_additional_bound = new Category("META_OR_CONCRETE_NO_GAP_additional_bound", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_additional_bound = new Category("META_OR_CONCRETE_additional_bound", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_additive_expression = new Category("META_OR_CONCRETE_NO_GAP_additive_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_additive_expression = new Category("META_OR_CONCRETE_additive_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_additive_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_additive_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_additive_expression_nn = new Category("META_OR_CONCRETE_additive_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_and_expression = new Category("META_OR_CONCRETE_NO_GAP_and_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_and_expression = new Category("META_OR_CONCRETE_and_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_and_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_and_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_and_expression_nn = new Category("META_OR_CONCRETE_and_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_annotation = new Category("META_OR_CONCRETE_NO_GAP_annotation", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_annotation = new Category("META_OR_CONCRETE_annotation", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_annotation_type_declaration = new Category("META_OR_CONCRETE_NO_GAP_annotation_type_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_annotation_type_declaration = new Category("META_OR_CONCRETE_annotation_type_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_annotation_type_element_declaration = new Category("META_OR_CONCRETE_NO_GAP_annotation_type_element_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_annotation_type_element_declaration = new Category("META_OR_CONCRETE_annotation_type_element_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_array_access = new Category("META_OR_CONCRETE_NO_GAP_array_access", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_array_access = new Category("META_OR_CONCRETE_array_access", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_array_creation_init = new Category("META_OR_CONCRETE_NO_GAP_array_creation_init", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_array_creation_init = new Category("META_OR_CONCRETE_array_creation_init", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_array_creation_uninit = new Category("META_OR_CONCRETE_NO_GAP_array_creation_uninit", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_array_creation_uninit = new Category("META_OR_CONCRETE_array_creation_uninit", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_array_initializer = new Category("META_OR_CONCRETE_NO_GAP_array_initializer", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_array_initializer = new Category("META_OR_CONCRETE_array_initializer", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_array_type = new Category("META_OR_CONCRETE_NO_GAP_array_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_array_type = new Category("META_OR_CONCRETE_array_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_assert_statement = new Category("META_OR_CONCRETE_NO_GAP_assert_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_assert_statement = new Category("META_OR_CONCRETE_assert_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_assignment = new Category("META_OR_CONCRETE_NO_GAP_assignment", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_assignment = new Category("META_OR_CONCRETE_assignment", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_assignment_expression = new Category("META_OR_CONCRETE_NO_GAP_assignment_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_assignment_expression = new Category("META_OR_CONCRETE_assignment_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_assignment_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_assignment_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_assignment_expression_nn = new Category("META_OR_CONCRETE_assignment_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_block = new Category("META_OR_CONCRETE_NO_GAP_block", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_block = new Category("META_OR_CONCRETE_block", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_block_statement = new Category("META_OR_CONCRETE_NO_GAP_block_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_block_statement = new Category("META_OR_CONCRETE_block_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_body_decl_with_comment = new Category("META_OR_CONCRETE_NO_GAP_body_decl_with_comment", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_body_decl_with_comment = new Category("META_OR_CONCRETE_body_decl_with_comment", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_break_statement = new Category("META_OR_CONCRETE_NO_GAP_break_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_break_statement = new Category("META_OR_CONCRETE_break_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_cast_expression = new Category("META_OR_CONCRETE_NO_GAP_cast_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_cast_expression = new Category("META_OR_CONCRETE_cast_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_catch_clause = new Category("META_OR_CONCRETE_NO_GAP_catch_clause", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_catch_clause = new Category("META_OR_CONCRETE_catch_clause", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_class_body_declaration = new Category("META_OR_CONCRETE_NO_GAP_class_body_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_class_body_declaration = new Category("META_OR_CONCRETE_class_body_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_class_declaration = new Category("META_OR_CONCRETE_NO_GAP_class_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_class_declaration = new Category("META_OR_CONCRETE_class_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_class_instance_creation_expression = new Category("META_OR_CONCRETE_NO_GAP_class_instance_creation_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_class_instance_creation_expression = new Category("META_OR_CONCRETE_class_instance_creation_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_class_literal = new Category("META_OR_CONCRETE_NO_GAP_class_literal", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_class_literal = new Category("META_OR_CONCRETE_class_literal", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_class_member_declaration = new Category("META_OR_CONCRETE_NO_GAP_class_member_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_class_member_declaration = new Category("META_OR_CONCRETE_class_member_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_class_or_interface = new Category("META_OR_CONCRETE_NO_GAP_class_or_interface", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_class_or_interface = new Category("META_OR_CONCRETE_class_or_interface", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_class_or_interface_type = new Category("META_OR_CONCRETE_NO_GAP_class_or_interface_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_class_or_interface_type = new Category("META_OR_CONCRETE_class_or_interface_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_class_type = new Category("META_OR_CONCRETE_NO_GAP_class_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_class_type = new Category("META_OR_CONCRETE_class_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_compilation_unit = new Category("META_OR_CONCRETE_NO_GAP_compilation_unit", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_compilation_unit = new Category("META_OR_CONCRETE_compilation_unit", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_conditional_and_expression = new Category("META_OR_CONCRETE_NO_GAP_conditional_and_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_conditional_and_expression = new Category("META_OR_CONCRETE_conditional_and_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_conditional_and_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_conditional_and_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_conditional_and_expression_nn = new Category("META_OR_CONCRETE_conditional_and_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_conditional_expression = new Category("META_OR_CONCRETE_NO_GAP_conditional_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_conditional_expression = new Category("META_OR_CONCRETE_conditional_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_conditional_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_conditional_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_conditional_expression_nn = new Category("META_OR_CONCRETE_conditional_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_conditional_or_expression = new Category("META_OR_CONCRETE_NO_GAP_conditional_or_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_conditional_or_expression = new Category("META_OR_CONCRETE_conditional_or_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_conditional_or_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_conditional_or_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_conditional_or_expression_nn = new Category("META_OR_CONCRETE_conditional_or_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_constant_declaration = new Category("META_OR_CONCRETE_NO_GAP_constant_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_constant_declaration = new Category("META_OR_CONCRETE_constant_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_constant_expression = new Category("META_OR_CONCRETE_NO_GAP_constant_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_constant_expression = new Category("META_OR_CONCRETE_constant_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_constructor_declaration = new Category("META_OR_CONCRETE_NO_GAP_constructor_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_constructor_declaration = new Category("META_OR_CONCRETE_constructor_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_constructor_reference = new Category("META_OR_CONCRETE_NO_GAP_constructor_reference", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_constructor_reference = new Category("META_OR_CONCRETE_constructor_reference", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_continue_statement = new Category("META_OR_CONCRETE_NO_GAP_continue_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_continue_statement = new Category("META_OR_CONCRETE_continue_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_default_value = new Category("META_OR_CONCRETE_NO_GAP_default_value", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_default_value = new Category("META_OR_CONCRETE_default_value", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_dim_expr = new Category("META_OR_CONCRETE_NO_GAP_dim_expr", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_dim_expr = new Category("META_OR_CONCRETE_dim_expr", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_do_statement = new Category("META_OR_CONCRETE_NO_GAP_do_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_do_statement = new Category("META_OR_CONCRETE_do_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_element_value = new Category("META_OR_CONCRETE_NO_GAP_element_value", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_element_value = new Category("META_OR_CONCRETE_element_value", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_element_value_array_initializer = new Category("META_OR_CONCRETE_NO_GAP_element_value_array_initializer", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_element_value_array_initializer = new Category("META_OR_CONCRETE_element_value_array_initializer", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_element_value_pair = new Category("META_OR_CONCRETE_NO_GAP_element_value_pair", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_element_value_pair = new Category("META_OR_CONCRETE_element_value_pair", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_empty_statement = new Category("META_OR_CONCRETE_NO_GAP_empty_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_empty_statement = new Category("META_OR_CONCRETE_empty_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_enhanced_for_parameter = new Category("META_OR_CONCRETE_NO_GAP_enhanced_for_parameter", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_enhanced_for_parameter = new Category("META_OR_CONCRETE_enhanced_for_parameter", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_enhanced_for_statement = new Category("META_OR_CONCRETE_NO_GAP_enhanced_for_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_enhanced_for_statement = new Category("META_OR_CONCRETE_enhanced_for_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_enhanced_for_statement_no_short_if = new Category("META_OR_CONCRETE_NO_GAP_enhanced_for_statement_no_short_if", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_enhanced_for_statement_no_short_if = new Category("META_OR_CONCRETE_enhanced_for_statement_no_short_if", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_enum_constant = new Category("META_OR_CONCRETE_NO_GAP_enum_constant", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_enum_constant = new Category("META_OR_CONCRETE_enum_constant", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_enum_declaration = new Category("META_OR_CONCRETE_NO_GAP_enum_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_enum_declaration = new Category("META_OR_CONCRETE_enum_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_equality_expression = new Category("META_OR_CONCRETE_NO_GAP_equality_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_equality_expression = new Category("META_OR_CONCRETE_equality_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_equality_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_equality_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_equality_expression_nn = new Category("META_OR_CONCRETE_equality_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression = new Category("META_OR_CONCRETE_NO_GAP_exclusive_or_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_exclusive_or_expression = new Category("META_OR_CONCRETE_exclusive_or_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_exclusive_or_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_exclusive_or_expression_nn = new Category("META_OR_CONCRETE_exclusive_or_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation = new Category("META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_explicit_constructor_invocation = new Category("META_OR_CONCRETE_explicit_constructor_invocation", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_expression = new Category("META_OR_CONCRETE_NO_GAP_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_expression = new Category("META_OR_CONCRETE_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_expression_nn = new Category("META_OR_CONCRETE_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_expression_nn_or_name_fix = new Category("META_OR_CONCRETE_NO_GAP_expression_nn_or_name_fix", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_expression_nn_or_name_fix = new Category("META_OR_CONCRETE_expression_nn_or_name_fix", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_expression_statement = new Category("META_OR_CONCRETE_NO_GAP_expression_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_expression_statement = new Category("META_OR_CONCRETE_expression_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_field_access = new Category("META_OR_CONCRETE_NO_GAP_field_access", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_field_access = new Category("META_OR_CONCRETE_field_access", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_field_declaration = new Category("META_OR_CONCRETE_NO_GAP_field_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_field_declaration = new Category("META_OR_CONCRETE_field_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_field_declarator = new Category("META_OR_CONCRETE_NO_GAP_field_declarator", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_field_declarator = new Category("META_OR_CONCRETE_field_declarator", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_field_declarator_id = new Category("META_OR_CONCRETE_NO_GAP_field_declarator_id", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_field_declarator_id = new Category("META_OR_CONCRETE_field_declarator_id", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_finally = new Category("META_OR_CONCRETE_NO_GAP_finally", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_finally = new Category("META_OR_CONCRETE_finally", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_floating_point_type = new Category("META_OR_CONCRETE_NO_GAP_floating_point_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_floating_point_type = new Category("META_OR_CONCRETE_floating_point_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_for_statement = new Category("META_OR_CONCRETE_NO_GAP_for_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_for_statement = new Category("META_OR_CONCRETE_for_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_for_statement_no_short_if = new Category("META_OR_CONCRETE_NO_GAP_for_statement_no_short_if", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_for_statement_no_short_if = new Category("META_OR_CONCRETE_for_statement_no_short_if", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_formal_parameter = new Category("META_OR_CONCRETE_NO_GAP_formal_parameter", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_formal_parameter = new Category("META_OR_CONCRETE_formal_parameter", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_formal_parameter_no_vararg_mixed_array = new Category("META_OR_CONCRETE_NO_GAP_formal_parameter_no_vararg_mixed_array", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_formal_parameter_no_vararg_mixed_array = new Category("META_OR_CONCRETE_formal_parameter_no_vararg_mixed_array", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_if_then_else_statement = new Category("META_OR_CONCRETE_NO_GAP_if_then_else_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_if_then_else_statement = new Category("META_OR_CONCRETE_if_then_else_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_if_then_else_statement_no_short_if = new Category("META_OR_CONCRETE_NO_GAP_if_then_else_statement_no_short_if", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_if_then_else_statement_no_short_if = new Category("META_OR_CONCRETE_if_then_else_statement_no_short_if", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_if_then_statement = new Category("META_OR_CONCRETE_NO_GAP_if_then_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_if_then_statement = new Category("META_OR_CONCRETE_if_then_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_import_declaration = new Category("META_OR_CONCRETE_NO_GAP_import_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_import_declaration = new Category("META_OR_CONCRETE_import_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_import_with_comment = new Category("META_OR_CONCRETE_NO_GAP_import_with_comment", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_import_with_comment = new Category("META_OR_CONCRETE_import_with_comment", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression = new Category("META_OR_CONCRETE_NO_GAP_inclusive_or_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_inclusive_or_expression = new Category("META_OR_CONCRETE_inclusive_or_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_inclusive_or_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_inclusive_or_expression_nn = new Category("META_OR_CONCRETE_inclusive_or_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_inferred_param_decl = new Category("META_OR_CONCRETE_NO_GAP_inferred_param_decl", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_inferred_param_decl = new Category("META_OR_CONCRETE_inferred_param_decl", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_instance_initializer = new Category("META_OR_CONCRETE_NO_GAP_instance_initializer", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_instance_initializer = new Category("META_OR_CONCRETE_instance_initializer", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_instanceof_expression = new Category("META_OR_CONCRETE_NO_GAP_instanceof_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_instanceof_expression = new Category("META_OR_CONCRETE_instanceof_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_instanceof_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_instanceof_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_instanceof_expression_nn = new Category("META_OR_CONCRETE_instanceof_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_integral_type = new Category("META_OR_CONCRETE_NO_GAP_integral_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_integral_type = new Category("META_OR_CONCRETE_integral_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_interface_declaration = new Category("META_OR_CONCRETE_NO_GAP_interface_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_interface_declaration = new Category("META_OR_CONCRETE_interface_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_interface_member_declaration = new Category("META_OR_CONCRETE_NO_GAP_interface_member_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_interface_member_declaration = new Category("META_OR_CONCRETE_interface_member_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_interface_member_with_comment = new Category("META_OR_CONCRETE_NO_GAP_interface_member_with_comment", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_interface_member_with_comment = new Category("META_OR_CONCRETE_interface_member_with_comment", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_interface_method_declaration = new Category("META_OR_CONCRETE_NO_GAP_interface_method_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_interface_method_declaration = new Category("META_OR_CONCRETE_interface_method_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_interface_method_header = new Category("META_OR_CONCRETE_NO_GAP_interface_method_header", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_interface_method_header = new Category("META_OR_CONCRETE_interface_method_header", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_interface_type = new Category("META_OR_CONCRETE_NO_GAP_interface_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_interface_type = new Category("META_OR_CONCRETE_interface_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_labeled_statement = new Category("META_OR_CONCRETE_NO_GAP_labeled_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_labeled_statement = new Category("META_OR_CONCRETE_labeled_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_labeled_statement_no_short_if = new Category("META_OR_CONCRETE_NO_GAP_labeled_statement_no_short_if", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_labeled_statement_no_short_if = new Category("META_OR_CONCRETE_labeled_statement_no_short_if", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_lambda_body = new Category("META_OR_CONCRETE_NO_GAP_lambda_body", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_lambda_body = new Category("META_OR_CONCRETE_lambda_body", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_lambda_expression = new Category("META_OR_CONCRETE_NO_GAP_lambda_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_lambda_expression = new Category("META_OR_CONCRETE_lambda_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_literal = new Category("META_OR_CONCRETE_NO_GAP_literal", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_literal = new Category("META_OR_CONCRETE_literal", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_local_variable_declaration = new Category("META_OR_CONCRETE_NO_GAP_local_variable_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_local_variable_declaration = new Category("META_OR_CONCRETE_local_variable_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_local_variable_declaration_statement = new Category("META_OR_CONCRETE_NO_GAP_local_variable_declaration_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_local_variable_declaration_statement = new Category("META_OR_CONCRETE_local_variable_declaration_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_marker_annotation = new Category("META_OR_CONCRETE_NO_GAP_marker_annotation", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_marker_annotation = new Category("META_OR_CONCRETE_marker_annotation", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_method_declaration = new Category("META_OR_CONCRETE_NO_GAP_method_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_method_declaration = new Category("META_OR_CONCRETE_method_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_method_header = new Category("META_OR_CONCRETE_NO_GAP_method_header", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_method_header = new Category("META_OR_CONCRETE_method_header", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_method_invocation = new Category("META_OR_CONCRETE_NO_GAP_method_invocation", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_method_invocation = new Category("META_OR_CONCRETE_method_invocation", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_method_reference = new Category("META_OR_CONCRETE_NO_GAP_method_reference", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_method_reference = new Category("META_OR_CONCRETE_method_reference", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_modifier = new Category("META_OR_CONCRETE_NO_GAP_modifier", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_modifier = new Category("META_OR_CONCRETE_modifier", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_multi_catch_param = new Category("META_OR_CONCRETE_NO_GAP_multi_catch_param", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_multi_catch_param = new Category("META_OR_CONCRETE_multi_catch_param", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_multiplicative_expression = new Category("META_OR_CONCRETE_NO_GAP_multiplicative_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_multiplicative_expression = new Category("META_OR_CONCRETE_multiplicative_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_multiplicative_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_multiplicative_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_multiplicative_expression_nn = new Category("META_OR_CONCRETE_multiplicative_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_name = new Category("META_OR_CONCRETE_NO_GAP_name", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_name = new Category("META_OR_CONCRETE_name", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_name_decl = new Category("META_OR_CONCRETE_NO_GAP_name_decl", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_name_decl = new Category("META_OR_CONCRETE_name_decl", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_nongeneric_array_type = new Category("META_OR_CONCRETE_NO_GAP_nongeneric_array_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_nongeneric_array_type = new Category("META_OR_CONCRETE_nongeneric_array_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_nongeneric_class_or_interface_type = new Category("META_OR_CONCRETE_NO_GAP_nongeneric_class_or_interface_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_nongeneric_class_or_interface_type = new Category("META_OR_CONCRETE_nongeneric_class_or_interface_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_nongeneric_formal_parameter = new Category("META_OR_CONCRETE_NO_GAP_nongeneric_formal_parameter", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_nongeneric_formal_parameter = new Category("META_OR_CONCRETE_nongeneric_formal_parameter", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_nongeneric_reference_type = new Category("META_OR_CONCRETE_NO_GAP_nongeneric_reference_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_nongeneric_reference_type = new Category("META_OR_CONCRETE_nongeneric_reference_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_nongeneric_type = new Category("META_OR_CONCRETE_NO_GAP_nongeneric_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_nongeneric_type = new Category("META_OR_CONCRETE_nongeneric_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_normal_annotation = new Category("META_OR_CONCRETE_NO_GAP_normal_annotation", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_normal_annotation = new Category("META_OR_CONCRETE_normal_annotation", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_numeric_type = new Category("META_OR_CONCRETE_NO_GAP_numeric_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_numeric_type = new Category("META_OR_CONCRETE_numeric_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_package_declaration = new Category("META_OR_CONCRETE_NO_GAP_package_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_package_declaration = new Category("META_OR_CONCRETE_package_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_package_with_comment = new Category("META_OR_CONCRETE_NO_GAP_package_with_comment", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_package_with_comment = new Category("META_OR_CONCRETE_package_with_comment", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_postdecrement_expression = new Category("META_OR_CONCRETE_NO_GAP_postdecrement_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_postdecrement_expression = new Category("META_OR_CONCRETE_postdecrement_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_postfix_expression = new Category("META_OR_CONCRETE_NO_GAP_postfix_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_postfix_expression = new Category("META_OR_CONCRETE_postfix_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_postfix_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_postfix_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_postfix_expression_nn = new Category("META_OR_CONCRETE_postfix_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_postincrement_expression = new Category("META_OR_CONCRETE_NO_GAP_postincrement_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_postincrement_expression = new Category("META_OR_CONCRETE_postincrement_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_predecrement_expression = new Category("META_OR_CONCRETE_NO_GAP_predecrement_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_predecrement_expression = new Category("META_OR_CONCRETE_predecrement_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_preincrement_expression = new Category("META_OR_CONCRETE_NO_GAP_preincrement_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_preincrement_expression = new Category("META_OR_CONCRETE_preincrement_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_primary = new Category("META_OR_CONCRETE_NO_GAP_primary", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_primary = new Category("META_OR_CONCRETE_primary", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_primary_no_new_array = new Category("META_OR_CONCRETE_NO_GAP_primary_no_new_array", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_primary_no_new_array = new Category("META_OR_CONCRETE_primary_no_new_array", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_primitive_type = new Category("META_OR_CONCRETE_NO_GAP_primitive_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_primitive_type = new Category("META_OR_CONCRETE_primitive_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_qualified_name = new Category("META_OR_CONCRETE_NO_GAP_qualified_name", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_qualified_name = new Category("META_OR_CONCRETE_qualified_name", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_qualified_name_decl = new Category("META_OR_CONCRETE_NO_GAP_qualified_name_decl", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_qualified_name_decl = new Category("META_OR_CONCRETE_qualified_name_decl", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_reference_type = new Category("META_OR_CONCRETE_NO_GAP_reference_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_reference_type = new Category("META_OR_CONCRETE_reference_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_relational_expression = new Category("META_OR_CONCRETE_NO_GAP_relational_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_relational_expression = new Category("META_OR_CONCRETE_relational_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_relational_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_relational_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_relational_expression_nn = new Category("META_OR_CONCRETE_relational_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_resource_declaration = new Category("META_OR_CONCRETE_NO_GAP_resource_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_resource_declaration = new Category("META_OR_CONCRETE_resource_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_return_statement = new Category("META_OR_CONCRETE_NO_GAP_return_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_return_statement = new Category("META_OR_CONCRETE_return_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_shift_expression = new Category("META_OR_CONCRETE_NO_GAP_shift_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_shift_expression = new Category("META_OR_CONCRETE_shift_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_shift_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_shift_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_shift_expression_nn = new Category("META_OR_CONCRETE_shift_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_simple_name = new Category("META_OR_CONCRETE_NO_GAP_simple_name", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_simple_name = new Category("META_OR_CONCRETE_simple_name", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_simple_name_decl = new Category("META_OR_CONCRETE_NO_GAP_simple_name_decl", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_simple_name_decl = new Category("META_OR_CONCRETE_simple_name_decl", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_single_element_annotation = new Category("META_OR_CONCRETE_NO_GAP_single_element_annotation", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_single_element_annotation = new Category("META_OR_CONCRETE_single_element_annotation", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_single_element_annotation_1 = new Category("META_OR_CONCRETE_NO_GAP_single_element_annotation_1", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_single_element_annotation_1 = new Category("META_OR_CONCRETE_single_element_annotation_1", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_single_element_annotation_2 = new Category("META_OR_CONCRETE_NO_GAP_single_element_annotation_2", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_single_element_annotation_2 = new Category("META_OR_CONCRETE_single_element_annotation_2", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_single_static_import_declaration = new Category("META_OR_CONCRETE_NO_GAP_single_static_import_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_single_static_import_declaration = new Category("META_OR_CONCRETE_single_static_import_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_single_type_import_declaration = new Category("META_OR_CONCRETE_NO_GAP_single_type_import_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_single_type_import_declaration = new Category("META_OR_CONCRETE_single_type_import_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_statement = new Category("META_OR_CONCRETE_NO_GAP_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_statement = new Category("META_OR_CONCRETE_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_statement_expression = new Category("META_OR_CONCRETE_NO_GAP_statement_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_statement_expression = new Category("META_OR_CONCRETE_statement_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_statement_no_short_if = new Category("META_OR_CONCRETE_NO_GAP_statement_no_short_if", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_statement_no_short_if = new Category("META_OR_CONCRETE_statement_no_short_if", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_statement_without_trailing_substatement = new Category("META_OR_CONCRETE_NO_GAP_statement_without_trailing_substatement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_statement_without_trailing_substatement = new Category("META_OR_CONCRETE_statement_without_trailing_substatement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_static_import_on_demand_declaration = new Category("META_OR_CONCRETE_NO_GAP_static_import_on_demand_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_static_import_on_demand_declaration = new Category("META_OR_CONCRETE_static_import_on_demand_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_static_initializer = new Category("META_OR_CONCRETE_NO_GAP_static_initializer", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_static_initializer = new Category("META_OR_CONCRETE_static_initializer", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_super = new Category("META_OR_CONCRETE_NO_GAP_super", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_super = new Category("META_OR_CONCRETE_super", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_switch_block = new Category("META_OR_CONCRETE_NO_GAP_switch_block", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_switch_block = new Category("META_OR_CONCRETE_switch_block", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_switch_label = new Category("META_OR_CONCRETE_NO_GAP_switch_label", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_switch_label = new Category("META_OR_CONCRETE_switch_label", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_switch_statement = new Category("META_OR_CONCRETE_NO_GAP_switch_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_switch_statement = new Category("META_OR_CONCRETE_switch_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_synchronized_statement = new Category("META_OR_CONCRETE_NO_GAP_synchronized_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_synchronized_statement = new Category("META_OR_CONCRETE_synchronized_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_throw_statement = new Category("META_OR_CONCRETE_NO_GAP_throw_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_throw_statement = new Category("META_OR_CONCRETE_throw_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_try_statement = new Category("META_OR_CONCRETE_NO_GAP_try_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_try_statement = new Category("META_OR_CONCRETE_try_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_try_with_resource = new Category("META_OR_CONCRETE_NO_GAP_try_with_resource", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_try_with_resource = new Category("META_OR_CONCRETE_try_with_resource", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_type = new Category("META_OR_CONCRETE_NO_GAP_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_type = new Category("META_OR_CONCRETE_type", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_type_argument = new Category("META_OR_CONCRETE_NO_GAP_type_argument", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_type_argument = new Category("META_OR_CONCRETE_type_argument", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_type_declaration = new Category("META_OR_CONCRETE_NO_GAP_type_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_type_declaration = new Category("META_OR_CONCRETE_type_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_type_import_on_demand_declaration = new Category("META_OR_CONCRETE_NO_GAP_type_import_on_demand_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_type_import_on_demand_declaration = new Category("META_OR_CONCRETE_type_import_on_demand_declaration", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_type_parameter = new Category("META_OR_CONCRETE_NO_GAP_type_parameter", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_type_parameter = new Category("META_OR_CONCRETE_type_parameter", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_type_with_comment = new Category("META_OR_CONCRETE_NO_GAP_type_with_comment", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_type_with_comment = new Category("META_OR_CONCRETE_type_with_comment", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_unary_expression = new Category("META_OR_CONCRETE_NO_GAP_unary_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_unary_expression = new Category("META_OR_CONCRETE_unary_expression", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_unary_expression_nn = new Category("META_OR_CONCRETE_NO_GAP_unary_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_unary_expression_nn = new Category("META_OR_CONCRETE_unary_expression_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus = new Category("META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_unary_expression_not_plus_minus = new Category("META_OR_CONCRETE_unary_expression_not_plus_minus", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus_nn = new Category("META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_unary_expression_not_plus_minus_nn = new Category("META_OR_CONCRETE_unary_expression_not_plus_minus_nn", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_variable_declarator = new Category("META_OR_CONCRETE_NO_GAP_variable_declarator", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_variable_declarator = new Category("META_OR_CONCRETE_variable_declarator", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_variable_declarator_id = new Category("META_OR_CONCRETE_NO_GAP_variable_declarator_id", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_variable_declarator_id = new Category("META_OR_CONCRETE_variable_declarator_id", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_variable_initializer = new Category("META_OR_CONCRETE_NO_GAP_variable_initializer", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_variable_initializer = new Category("META_OR_CONCRETE_variable_initializer", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_while_statement = new Category("META_OR_CONCRETE_NO_GAP_while_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_while_statement = new Category("META_OR_CONCRETE_while_statement", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_while_statement_no_short_if = new Category("META_OR_CONCRETE_NO_GAP_while_statement_no_short_if", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_while_statement_no_short_if = new Category("META_OR_CONCRETE_while_statement_no_short_if", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_NO_GAP_wildcard = new Category("META_OR_CONCRETE_NO_GAP_wildcard", /*terminal*/ false);
public static Category n_META_OR_CONCRETE_wildcard = new Category("META_OR_CONCRETE_wildcard", /*terminal*/ false);
public static Category n_META_SYM_IDENTIFIER = new Category("META_SYM_IDENTIFIER", /*terminal*/ false);

public static void addRules1(Grammar g) {
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_goal, n_META_OR_CONCRETE_NO_GAP_compilation_unit));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_literal, t_NULL_LITERAL));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_literal, t_STRING_LITERAL));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_literal, t_CHARACTER_LITERAL));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_literal, t_BOOLEAN_LITERAL));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_literal, t_NUMERIC_LITERAL));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type, n_META_OR_CONCRETE_NO_GAP_reference_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type, n_META_OR_CONCRETE_NO_GAP_primitive_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primitive_type, t_BOOLEAN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primitive_type, n_META_OR_CONCRETE_NO_GAP_numeric_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_numeric_type, n_META_OR_CONCRETE_NO_GAP_floating_point_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_numeric_type, n_META_OR_CONCRETE_NO_GAP_integral_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_integral_type, t_CHAR));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_integral_type, t_LONG));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_integral_type, t_INT));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_integral_type, t_SHORT));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_integral_type, t_BYTE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_floating_point_type, t_DOUBLE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_floating_point_type, t_FLOAT));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_reference_type, n_META_OR_CONCRETE_NO_GAP_array_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_reference_type, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_or_interface_type, n_META_OR_CONCRETE_NO_GAP_class_or_interface, n_type_arguments));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_or_interface_type, n_META_OR_CONCRETE_NO_GAP_class_or_interface, t_LT, t_GT));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_or_interface_type, n_META_OR_CONCRETE_NO_GAP_class_or_interface));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_or_interface_type, n_META_OR_CONCRETE_NO_GAP_class_or_interface, t_LT, t_GT));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_type, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_type, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_type, n_META_OR_CONCRETE_NO_GAP_name, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_type, n_META_OR_CONCRETE_NO_GAP_primitive_type, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_type, n_META_OR_CONCRETE_NO_GAP_class_or_interface, n_type_arguments, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_type, n_META_OR_CONCRETE_NO_GAP_class_or_interface, n_type_arguments, t_DOT, n_META_OR_CONCRETE_NO_GAP_name, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_name, n_META_OR_CONCRETE_NO_GAP_qualified_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_name, n_META_OR_CONCRETE_NO_GAP_simple_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_simple_name, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_qualified_name, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, n_META_OR_CONCRETE_NO_GAP_simple_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_import_declarations));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_type_declarations));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_import_declarations, n_type_declarations));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_doc_comment_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_import_declarations, n_doc_comment_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_type_declarations, n_doc_comment_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_import_declarations, n_type_declarations, n_doc_comment_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_META_OR_CONCRETE_NO_GAP_package_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_META_OR_CONCRETE_NO_GAP_package_with_comment, n_import_declarations));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_META_OR_CONCRETE_NO_GAP_package_with_comment, n_type_declarations));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_META_OR_CONCRETE_NO_GAP_package_with_comment, n_import_declarations, n_type_declarations));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_META_OR_CONCRETE_NO_GAP_package_with_comment, n_doc_comment_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_META_OR_CONCRETE_NO_GAP_package_with_comment, n_import_declarations, n_doc_comment_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_META_OR_CONCRETE_NO_GAP_package_with_comment, n_type_declarations, n_doc_comment_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_META_OR_CONCRETE_NO_GAP_package_with_comment, n_import_declarations, n_type_declarations, n_doc_comment_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_modifiers, n_META_OR_CONCRETE_NO_GAP_package_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_modifiers, n_META_OR_CONCRETE_NO_GAP_package_declaration, n_import_declarations));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_modifiers, n_META_OR_CONCRETE_NO_GAP_package_declaration, n_type_declarations));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_compilation_unit, n_modifiers, n_META_OR_CONCRETE_NO_GAP_package_declaration, n_import_declarations, n_type_declarations));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_import_declarations, n_import_declarations, n_META_OR_CONCRETE_import_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_import_declarations, n_META_OR_CONCRETE_import_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_declarations, n_type_declarations, n_META_OR_CONCRETE_type_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_declarations, n_type_declarations, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_declarations, n_META_OR_CONCRETE_type_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_declarations, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_doc_comment, t_DOCUMENTATION_COMMENT));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_doc_comment_list, n_doc_comment_list, n_doc_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_doc_comment_list, n_doc_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_package_with_comment, n_META_OR_CONCRETE_NO_GAP_package_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_package_with_comment, n_doc_comment_list, n_META_OR_CONCRETE_NO_GAP_package_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_package_declaration, t_PACKAGE, n_META_OR_CONCRETE_NO_GAP_name_decl, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_name_decl, n_META_OR_CONCRETE_NO_GAP_qualified_name_decl));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_name_decl, n_META_OR_CONCRETE_NO_GAP_simple_name_decl));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_simple_name_decl, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_qualified_name_decl, n_META_OR_CONCRETE_NO_GAP_name_decl, t_DOT, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_import_with_comment, n_META_OR_CONCRETE_NO_GAP_import_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_import_with_comment, n_doc_comment_list, n_META_OR_CONCRETE_NO_GAP_import_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_import_declaration, n_META_OR_CONCRETE_NO_GAP_type_import_on_demand_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_import_declaration, n_META_OR_CONCRETE_NO_GAP_single_type_import_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_import_declaration, n_META_OR_CONCRETE_NO_GAP_static_import_on_demand_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_import_declaration, n_META_OR_CONCRETE_NO_GAP_single_static_import_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_single_type_import_declaration, t_IMPORT, n_META_OR_CONCRETE_NO_GAP_name, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_import_on_demand_declaration, t_IMPORT, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_MULT, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_with_comment, n_doc_comment_list, n_META_OR_CONCRETE_NO_GAP_type_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_with_comment, n_META_OR_CONCRETE_NO_GAP_type_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_declaration, n_META_OR_CONCRETE_NO_GAP_interface_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_declaration, n_META_OR_CONCRETE_NO_GAP_class_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_declaration, n_META_OR_CONCRETE_NO_GAP_annotation_type_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_declaration, n_META_OR_CONCRETE_NO_GAP_enum_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifiers, n_modifiers, n_META_OR_CONCRETE_modifier));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifiers, n_META_OR_CONCRETE_modifier));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, t_STRICTFP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, t_VOLATILE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, t_TRANSIENT));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, t_SYNCHRONIZED));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, t_NATIVE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, t_FINAL));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, t_ABSTRACT));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, t_STATIC));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, t_PRIVATE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, t_PROTECTED));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, t_PUBLIC));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, n_META_OR_CONCRETE_NO_GAP_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, t_DEFAULT));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_modifier, t_PACKAGE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, t_CLASS, n_META_SYM_IDENTIFIER, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, n_modifiers, t_CLASS, n_META_SYM_IDENTIFIER, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, t_CLASS, n_META_SYM_IDENTIFIER, n_META_OR_CONCRETE_NO_GAP_super, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, n_modifiers, t_CLASS, n_META_SYM_IDENTIFIER, n_META_OR_CONCRETE_NO_GAP_super, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, t_CLASS, n_META_SYM_IDENTIFIER, n_interfaces, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, n_modifiers, t_CLASS, n_META_SYM_IDENTIFIER, n_interfaces, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, t_CLASS, n_META_SYM_IDENTIFIER, n_META_OR_CONCRETE_NO_GAP_super, n_interfaces, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, n_modifiers, t_CLASS, n_META_SYM_IDENTIFIER, n_META_OR_CONCRETE_NO_GAP_super, n_interfaces, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, t_CLASS, n_META_SYM_IDENTIFIER, n_type_parameters, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, n_modifiers, t_CLASS, n_META_SYM_IDENTIFIER, n_type_parameters, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, t_CLASS, n_META_SYM_IDENTIFIER, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_super, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, n_modifiers, t_CLASS, n_META_SYM_IDENTIFIER, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_super, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, t_CLASS, n_META_SYM_IDENTIFIER, n_type_parameters, n_interfaces, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, n_modifiers, t_CLASS, n_META_SYM_IDENTIFIER, n_type_parameters, n_interfaces, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, t_CLASS, n_META_SYM_IDENTIFIER, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_super, n_interfaces, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_declaration, n_modifiers, t_CLASS, n_META_SYM_IDENTIFIER, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_super, n_interfaces, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_super, t_EXTENDS, n_META_OR_CONCRETE_NO_GAP_class_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interfaces, t_IMPLEMENTS, n_interface_type_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_type_list, n_interface_type_list, t_COMMA, n_META_OR_CONCRETE_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_type_list, n_META_OR_CONCRETE_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_body, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_body, t_LBRACE, n_class_body_declarations, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_body, t_LBRACE, n_doc_comment_list, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_body, t_LBRACE, n_class_body_declarations, n_doc_comment_list, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_body_declarations, n_class_body_declarations, n_META_OR_CONCRETE_body_decl_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_body_declarations, n_META_OR_CONCRETE_body_decl_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_body_decl_with_comment, n_doc_comment_list, n_META_OR_CONCRETE_NO_GAP_class_body_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_body_decl_with_comment, n_META_OR_CONCRETE_NO_GAP_class_body_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_body_declaration, n_META_OR_CONCRETE_NO_GAP_constructor_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_body_declaration, n_META_OR_CONCRETE_NO_GAP_static_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_body_declaration, n_META_OR_CONCRETE_NO_GAP_instance_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_body_declaration, n_META_OR_CONCRETE_NO_GAP_class_member_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_body_declaration, t_error, t_LBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_body_declaration, t_error, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_member_declaration, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_member_declaration, n_META_OR_CONCRETE_NO_GAP_interface_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_member_declaration, n_META_OR_CONCRETE_NO_GAP_class_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_member_declaration, n_META_OR_CONCRETE_NO_GAP_method_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_member_declaration, n_META_OR_CONCRETE_NO_GAP_field_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_member_declaration, n_META_OR_CONCRETE_NO_GAP_annotation_type_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_member_declaration, n_META_OR_CONCRETE_NO_GAP_enum_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_field_declaration, n_META_OR_CONCRETE_NO_GAP_type, n_field_declarators, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_field_declaration, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_field_declarators, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_field_declarators, n_field_declarators, t_COMMA, n_META_OR_CONCRETE_field_declarator));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_field_declarators, n_META_OR_CONCRETE_field_declarator));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_field_declarator, n_META_OR_CONCRETE_NO_GAP_field_declarator_id, t_EQ, n_META_OR_CONCRETE_NO_GAP_variable_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_field_declarator, n_META_OR_CONCRETE_NO_GAP_field_declarator_id));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_field_declarator_id, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_field_declarator_id, n_META_SYM_IDENTIFIER, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_variable_initializer, n_META_OR_CONCRETE_NO_GAP_array_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_variable_initializer, n_META_OR_CONCRETE_NO_GAP_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_declaration, n_META_OR_CONCRETE_NO_GAP_method_header, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_declaration, n_META_OR_CONCRETE_NO_GAP_method_header, n_META_OR_CONCRETE_NO_GAP_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter_list, n_formal_parameter_list, t_COMMA, n_META_OR_CONCRETE_formal_parameter));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter_list, n_META_OR_CONCRETE_formal_parameter));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter, n_META_OR_CONCRETE_NO_GAP_type, t_ELLIPSIS, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, t_ELLIPSIS, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter, n_META_OR_CONCRETE_NO_GAP_type, t_ELLIPSIS, n_META_SYM_IDENTIFIER, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, t_ELLIPSIS, n_META_SYM_IDENTIFIER, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_throws, t_THROWS, n_class_type_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_type_list, n_class_type_list, t_COMMA, n_META_OR_CONCRETE_class_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_type_list, n_META_OR_CONCRETE_class_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_static_initializer, t_STATIC, n_META_OR_CONCRETE_NO_GAP_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_instance_initializer, n_META_OR_CONCRETE_NO_GAP_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_declaration, n_modifiers, n_type_parameters, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws, t_LBRACE, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_SUPER, t_LPAREN, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_SUPER, t_LPAREN, n_argument_list, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_SUPER, t_LPAREN, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_SUPER, t_LPAREN, n_argument_list, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, t_SUPER, t_LPAREN, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, t_SUPER, t_LPAREN, n_argument_list, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, t_THIS, t_LPAREN, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, t_THIS, t_LPAREN, n_argument_list, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, n_type_arguments, t_SUPER, t_LPAREN, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, n_type_arguments, t_SUPER, t_LPAREN, n_argument_list, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, n_type_arguments, t_SUPER, t_LPAREN, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, n_type_arguments, t_SUPER, t_LPAREN, n_argument_list, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, n_type_arguments, t_SUPER, t_LPAREN, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, n_type_arguments, t_SUPER, t_LPAREN, n_argument_list, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, n_type_arguments, t_THIS, t_LPAREN, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_explicit_constructor_invocation, n_type_arguments, t_THIS, t_LPAREN, n_argument_list, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_declaration, t_INTERFACE, n_META_SYM_IDENTIFIER, n_interface_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_declaration, n_modifiers, t_INTERFACE, n_META_SYM_IDENTIFIER, n_interface_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_declaration, t_INTERFACE, n_META_SYM_IDENTIFIER, n_extends_interfaces, n_interface_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_declaration, n_modifiers, t_INTERFACE, n_META_SYM_IDENTIFIER, n_extends_interfaces, n_interface_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_declaration, t_INTERFACE, n_META_SYM_IDENTIFIER, n_type_parameters, n_interface_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_declaration, n_modifiers, t_INTERFACE, n_META_SYM_IDENTIFIER, n_type_parameters, n_interface_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_declaration, t_INTERFACE, n_META_SYM_IDENTIFIER, n_type_parameters, n_extends_interfaces, n_interface_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_declaration, n_modifiers, t_INTERFACE, n_META_SYM_IDENTIFIER, n_type_parameters, n_extends_interfaces, n_interface_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_extends_interfaces, n_extends_interfaces, t_COMMA, n_META_OR_CONCRETE_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_extends_interfaces, t_EXTENDS, n_META_OR_CONCRETE_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_body, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_body, t_LBRACE, n_interface_member_declarations, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_body, t_LBRACE, n_doc_comment_list, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_body, t_LBRACE, n_interface_member_declarations, n_doc_comment_list, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_member_declarations, n_interface_member_declarations, n_META_OR_CONCRETE_interface_member_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_member_declarations, n_META_OR_CONCRETE_interface_member_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_member_with_comment, n_doc_comment_list, n_META_OR_CONCRETE_NO_GAP_interface_member_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_member_with_comment, n_META_OR_CONCRETE_NO_GAP_interface_member_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_member_declaration, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_member_declaration, n_META_OR_CONCRETE_NO_GAP_interface_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_member_declaration, n_META_OR_CONCRETE_NO_GAP_class_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_member_declaration, n_META_OR_CONCRETE_NO_GAP_abstract_method_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_member_declaration, n_META_OR_CONCRETE_NO_GAP_constant_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_member_declaration, n_META_OR_CONCRETE_NO_GAP_annotation_type_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_member_declaration, n_META_OR_CONCRETE_NO_GAP_enum_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constant_declaration, n_META_OR_CONCRETE_NO_GAP_field_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_abstract_method_declaration, n_META_OR_CONCRETE_NO_GAP_interface_method_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_initializer, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_initializer, t_LBRACE, n_variable_initializers, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_initializer, t_LBRACE, t_COMMA, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_initializer, t_LBRACE, n_variable_initializers, t_COMMA, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_variable_initializers, n_variable_initializers, t_COMMA, n_META_OR_CONCRETE_variable_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_variable_initializers, n_META_OR_CONCRETE_variable_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_block, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_block, t_LBRACE, n_block_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_block, t_LBRACE, t_error, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_block_statements, n_block_statements, n_META_OR_CONCRETE_block_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_block_statements, n_META_OR_CONCRETE_block_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_block_statement, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_block_statement, n_META_OR_CONCRETE_NO_GAP_class_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_block_statement, n_META_OR_CONCRETE_NO_GAP_local_variable_declaration_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_local_variable_declaration_statement, n_META_OR_CONCRETE_NO_GAP_local_variable_declaration, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_local_variable_declaration, n_META_OR_CONCRETE_NO_GAP_type, n_variable_declarators));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_local_variable_declaration, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_variable_declarators));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_variable_declarators, n_variable_declarators, t_COMMA, n_META_OR_CONCRETE_variable_declarator));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_variable_declarators, n_META_OR_CONCRETE_variable_declarator));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_variable_declarator, n_META_OR_CONCRETE_NO_GAP_variable_declarator_id, t_EQ, n_META_OR_CONCRETE_NO_GAP_variable_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_variable_declarator, n_META_OR_CONCRETE_NO_GAP_variable_declarator_id));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_variable_declarator_id, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_variable_declarator_id, n_META_SYM_IDENTIFIER, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement, n_META_OR_CONCRETE_NO_GAP_for_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement, n_META_OR_CONCRETE_NO_GAP_while_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement, n_META_OR_CONCRETE_NO_GAP_if_then_else_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement, n_META_OR_CONCRETE_NO_GAP_if_then_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement, n_META_OR_CONCRETE_NO_GAP_labeled_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement, n_META_OR_CONCRETE_NO_GAP_statement_without_trailing_substatement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement, n_META_OR_CONCRETE_NO_GAP_enhanced_for_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement, t_error, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement, n_META_OR_CONCRETE_NO_GAP_try_with_resource));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_without_trailing_substatement, n_META_OR_CONCRETE_NO_GAP_assert_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_without_trailing_substatement, n_META_OR_CONCRETE_NO_GAP_try_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_without_trailing_substatement, n_META_OR_CONCRETE_NO_GAP_throw_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_without_trailing_substatement, n_META_OR_CONCRETE_NO_GAP_synchronized_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_without_trailing_substatement, n_META_OR_CONCRETE_NO_GAP_return_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_without_trailing_substatement, n_META_OR_CONCRETE_NO_GAP_continue_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_without_trailing_substatement, n_META_OR_CONCRETE_NO_GAP_break_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_without_trailing_substatement, n_META_OR_CONCRETE_NO_GAP_do_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_without_trailing_substatement, n_META_OR_CONCRETE_NO_GAP_switch_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_without_trailing_substatement, n_META_OR_CONCRETE_NO_GAP_expression_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_without_trailing_substatement, n_META_OR_CONCRETE_NO_GAP_empty_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_without_trailing_substatement, n_META_OR_CONCRETE_NO_GAP_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_no_short_if, n_META_OR_CONCRETE_NO_GAP_for_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_no_short_if, n_META_OR_CONCRETE_NO_GAP_while_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_no_short_if, n_META_OR_CONCRETE_NO_GAP_if_then_else_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_no_short_if, n_META_OR_CONCRETE_NO_GAP_labeled_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_no_short_if, n_META_OR_CONCRETE_NO_GAP_statement_without_trailing_substatement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_no_short_if, n_META_OR_CONCRETE_NO_GAP_enhanced_for_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_if_then_statement, t_IF, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_expression, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_if_then_else_statement, t_IF, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_expression, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if, t_ELSE, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_if_then_else_statement_no_short_if, t_IF, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_expression, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if, t_ELSE, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_empty_statement, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_labeled_statement, n_META_SYM_IDENTIFIER, t_COLON, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_labeled_statement_no_short_if, n_META_SYM_IDENTIFIER, t_COLON, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_expression_statement, n_META_OR_CONCRETE_NO_GAP_statement_expression, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_expression, n_META_OR_CONCRETE_NO_GAP_class_instance_creation_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_expression, n_META_OR_CONCRETE_NO_GAP_method_invocation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_expression, n_META_OR_CONCRETE_NO_GAP_postdecrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_expression, n_META_OR_CONCRETE_NO_GAP_postincrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_expression, n_META_OR_CONCRETE_NO_GAP_predecrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_expression, n_META_OR_CONCRETE_NO_GAP_preincrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_expression, n_META_OR_CONCRETE_NO_GAP_assignment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_switch_statement, t_SWITCH, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_expression, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_switch_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_switch_block, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_switch_block, t_LBRACE, n_switch_statements, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_switch_block, t_LBRACE, t_error, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_switch_statements, n_switch_statements, n_META_OR_CONCRETE_block_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_switch_statements, n_switch_statements, n_META_OR_CONCRETE_switch_label));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_switch_statements, n_META_OR_CONCRETE_switch_label));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_switch_label, t_DEFAULT, t_COLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_switch_label, t_CASE, n_META_OR_CONCRETE_NO_GAP_constant_expression, t_COLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_while_statement, t_WHILE, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_expression, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_while_statement_no_short_if, t_WHILE, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_expression, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_do_statement, t_DO, n_META_OR_CONCRETE_NO_GAP_statement, t_WHILE, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_expression, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement, t_FOR, t_LPAREN, t_SEMICOLON, t_SEMICOLON, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, t_SEMICOLON, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement, t_FOR, t_LPAREN, t_SEMICOLON, n_META_OR_CONCRETE_NO_GAP_expression, t_SEMICOLON, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, n_META_OR_CONCRETE_NO_GAP_expression, t_SEMICOLON, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement, t_FOR, t_LPAREN, t_SEMICOLON, t_SEMICOLON, n_for_update, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, t_SEMICOLON, n_for_update, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement, t_FOR, t_LPAREN, t_SEMICOLON, n_META_OR_CONCRETE_NO_GAP_expression, t_SEMICOLON, n_for_update, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, n_META_OR_CONCRETE_NO_GAP_expression, t_SEMICOLON, n_for_update, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement_no_short_if, t_FOR, t_LPAREN, t_SEMICOLON, t_SEMICOLON, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement_no_short_if, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, t_SEMICOLON, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement_no_short_if, t_FOR, t_LPAREN, t_SEMICOLON, n_META_OR_CONCRETE_NO_GAP_expression, t_SEMICOLON, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement_no_short_if, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, n_META_OR_CONCRETE_NO_GAP_expression, t_SEMICOLON, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement_no_short_if, t_FOR, t_LPAREN, t_SEMICOLON, t_SEMICOLON, n_for_update, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement_no_short_if, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, t_SEMICOLON, n_for_update, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement_no_short_if, t_FOR, t_LPAREN, t_SEMICOLON, n_META_OR_CONCRETE_NO_GAP_expression, t_SEMICOLON, n_for_update, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_statement_no_short_if, t_FOR, t_LPAREN, n_for_init, t_SEMICOLON, n_META_OR_CONCRETE_NO_GAP_expression, t_SEMICOLON, n_for_update, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_init, n_META_OR_CONCRETE_local_variable_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_init, n_statement_expression_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_for_update, n_statement_expression_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_expression_list, n_statement_expression_list, t_COMMA, n_META_OR_CONCRETE_statement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_statement_expression_list, n_META_OR_CONCRETE_statement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_break_statement, t_BREAK, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_break_statement, t_BREAK, n_META_SYM_IDENTIFIER, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_continue_statement, t_CONTINUE, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_continue_statement, t_CONTINUE, n_META_SYM_IDENTIFIER, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_return_statement, t_RETURN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_return_statement, t_RETURN, n_META_OR_CONCRETE_NO_GAP_expression, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_throw_statement, t_THROW, n_META_OR_CONCRETE_NO_GAP_expression, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_synchronized_statement, t_SYNCHRONIZED, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_expression, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_try_statement, t_TRY, n_META_OR_CONCRETE_NO_GAP_block, n_catches, n_META_OR_CONCRETE_NO_GAP_finally));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_try_statement, t_TRY, n_META_OR_CONCRETE_NO_GAP_block, n_META_OR_CONCRETE_NO_GAP_finally));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_try_statement, t_TRY, n_META_OR_CONCRETE_NO_GAP_block, n_catches));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_catches, n_catches, n_META_OR_CONCRETE_catch_clause));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_catches, n_META_OR_CONCRETE_catch_clause));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_catch_clause, t_CATCH, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_formal_parameter, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_catch_clause, t_CATCH, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_multi_catch_param, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_finally, t_FINALLY, n_META_OR_CONCRETE_NO_GAP_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assert_statement, t_ASSERT, n_META_OR_CONCRETE_NO_GAP_expression, t_COLON, n_META_OR_CONCRETE_NO_GAP_expression, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assert_statement, t_ASSERT, n_META_OR_CONCRETE_NO_GAP_expression, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary, n_META_OR_CONCRETE_NO_GAP_array_creation_uninit));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary, n_META_OR_CONCRETE_NO_GAP_array_creation_init));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary, n_META_OR_CONCRETE_NO_GAP_primary_no_new_array));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_literal, t_CLASS));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_array_access));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_method_invocation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_field_access));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_class_instance_creation_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_expression_nn_or_name_fix, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_THIS));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, t_THIS));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, t_VOID, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_literal));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_literal));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_name, n_dims, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_literal));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_primitive_type, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_literal));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_primitive_type, n_dims, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_literal));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_literal));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_constructor_reference));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_lambda_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_method_reference));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, n_argument_list, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, n_argument_list, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, n_argument_list, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, n_argument_list, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, n_argument_list, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, n_argument_list, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, n_argument_list, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, n_argument_list, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_LPAREN, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_LPAREN, n_argument_list, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, t_NEW, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_LPAREN, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, t_NEW, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_LPAREN, n_argument_list, t_RPAREN, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, n_type_arguments, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, t_NEW, n_META_OR_CONCRETE_NO_GAP_simple_name, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, t_NEW, n_type_arguments, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, t_NEW, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_instance_creation_expression, t_NEW, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_argument_list, n_argument_list, t_COMMA, n_META_OR_CONCRETE_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_argument_list, n_META_OR_CONCRETE_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_creation_uninit, t_NEW, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dim_exprs, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_creation_uninit, t_NEW, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dim_exprs));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_creation_uninit, t_NEW, n_META_OR_CONCRETE_NO_GAP_primitive_type, n_dim_exprs, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_creation_uninit, t_NEW, n_META_OR_CONCRETE_NO_GAP_primitive_type, n_dim_exprs));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_creation_init, t_NEW, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, n_META_OR_CONCRETE_NO_GAP_array_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_creation_init, t_NEW, n_META_OR_CONCRETE_NO_GAP_primitive_type, n_dims, n_META_OR_CONCRETE_NO_GAP_array_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_dim_exprs, n_dim_exprs, n_META_OR_CONCRETE_dim_expr));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_dim_exprs, n_META_OR_CONCRETE_dim_expr));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_dim_expr, t_LBRACK, n_META_OR_CONCRETE_NO_GAP_expression, t_RBRACK));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_dims, n_dims, t_LBRACK, t_RBRACK));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_dims, t_LBRACK, t_RBRACK));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_field_access, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_SUPER, t_DOT, n_META_OR_CONCRETE_NO_GAP_simple_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_field_access, t_SUPER, t_DOT, n_META_OR_CONCRETE_NO_GAP_simple_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_field_access, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, n_META_OR_CONCRETE_NO_GAP_simple_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_SUPER, t_DOT, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_SUPER, t_DOT, n_META_SYM_IDENTIFIER, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, t_SUPER, t_DOT, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, t_SUPER, t_DOT, n_META_SYM_IDENTIFIER, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, n_META_SYM_IDENTIFIER, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, n_META_OR_CONCRETE_NO_GAP_name, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, n_META_OR_CONCRETE_NO_GAP_name, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_SUPER, t_DOT, n_type_arguments, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_SUPER, t_DOT, n_type_arguments, n_META_SYM_IDENTIFIER, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, t_SUPER, t_DOT, n_type_arguments, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, t_SUPER, t_DOT, n_type_arguments, n_META_SYM_IDENTIFIER, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, n_type_arguments, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, n_type_arguments, n_META_SYM_IDENTIFIER, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, n_type_arguments, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_invocation, n_META_OR_CONCRETE_NO_GAP_primary, t_DOT, n_type_arguments, n_META_SYM_IDENTIFIER, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_access, n_META_OR_CONCRETE_NO_GAP_primary_no_new_array, t_LBRACK, n_META_OR_CONCRETE_NO_GAP_expression, t_RBRACK));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_array_access, n_META_OR_CONCRETE_NO_GAP_name, t_LBRACK, n_META_OR_CONCRETE_NO_GAP_expression, t_RBRACK));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_postfix_expression, n_META_OR_CONCRETE_NO_GAP_postdecrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_postfix_expression, n_META_OR_CONCRETE_NO_GAP_postincrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_postfix_expression, n_META_OR_CONCRETE_NO_GAP_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_postfix_expression, n_META_OR_CONCRETE_NO_GAP_primary));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_postincrement_expression, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_PLUSPLUS));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_postdecrement_expression, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_MINUSMINUS));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression, t_MINUS, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression, t_PLUS, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression, n_META_OR_CONCRETE_NO_GAP_predecrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression, n_META_OR_CONCRETE_NO_GAP_preincrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_preincrement_expression, t_PLUSPLUS, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_predecrement_expression, t_MINUSMINUS, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression_not_plus_minus, n_META_OR_CONCRETE_NO_GAP_cast_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression_not_plus_minus, t_NOT, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression_not_plus_minus, t_COMP, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression_not_plus_minus, n_META_OR_CONCRETE_NO_GAP_postfix_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, n_dims, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_primitive_type, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_primitive_type, n_dims, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, n_type_arguments, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, n_type_arguments, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, n_type_arguments, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, n_type_arguments, n_dims, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_additional_bound_list, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, n_additional_bound_list, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_additional_bound_list, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, n_additional_bound_list, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, n_additional_bound_list, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_cast_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, n_dims, n_additional_bound_list, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multiplicative_expression, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression, t_MOD, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multiplicative_expression, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression, t_DIV, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multiplicative_expression, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression, t_MULT, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multiplicative_expression, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_additive_expression, n_META_OR_CONCRETE_NO_GAP_additive_expression, t_MINUS, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_additive_expression, n_META_OR_CONCRETE_NO_GAP_additive_expression, t_PLUS, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_additive_expression, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_shift_expression, n_META_OR_CONCRETE_NO_GAP_shift_expression, t_GT, t_GT, t_GT, n_META_OR_CONCRETE_NO_GAP_additive_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_shift_expression, n_META_OR_CONCRETE_NO_GAP_shift_expression, t_GT, t_GT, n_META_OR_CONCRETE_NO_GAP_additive_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_shift_expression, n_META_OR_CONCRETE_NO_GAP_shift_expression, t_LSHIFT, n_META_OR_CONCRETE_NO_GAP_additive_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_shift_expression, n_META_OR_CONCRETE_NO_GAP_additive_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression, n_META_OR_CONCRETE_NO_GAP_relational_expression, t_GTEQ, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression, n_META_OR_CONCRETE_NO_GAP_relational_expression, t_LTEQ, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression, n_META_OR_CONCRETE_NO_GAP_relational_expression, t_GT, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression, n_META_OR_CONCRETE_NO_GAP_relational_expression, t_LT, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_equality_expression, n_META_OR_CONCRETE_NO_GAP_equality_expression, t_NOTEQ, n_META_OR_CONCRETE_NO_GAP_relational_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_equality_expression, n_META_OR_CONCRETE_NO_GAP_equality_expression, t_EQEQ, n_META_OR_CONCRETE_NO_GAP_relational_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_equality_expression, n_META_OR_CONCRETE_NO_GAP_instanceof_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_and_expression, n_META_OR_CONCRETE_NO_GAP_and_expression, t_AND, n_META_OR_CONCRETE_NO_GAP_equality_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_and_expression, n_META_OR_CONCRETE_NO_GAP_equality_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_exclusive_or_expression, n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression, t_XOR, n_META_OR_CONCRETE_NO_GAP_and_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_exclusive_or_expression, n_META_OR_CONCRETE_NO_GAP_and_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_inclusive_or_expression, n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression, t_OR, n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_inclusive_or_expression, n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_and_expression, n_META_OR_CONCRETE_NO_GAP_conditional_and_expression, t_ANDAND, n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_and_expression, n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_or_expression, n_META_OR_CONCRETE_NO_GAP_conditional_or_expression, t_OROR, n_META_OR_CONCRETE_NO_GAP_conditional_and_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_or_expression, n_META_OR_CONCRETE_NO_GAP_conditional_and_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_expression, n_META_OR_CONCRETE_NO_GAP_conditional_or_expression, t_QUESTION, n_META_OR_CONCRETE_NO_GAP_expression, t_COLON, n_META_OR_CONCRETE_NO_GAP_conditional_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_expression, n_META_OR_CONCRETE_NO_GAP_conditional_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment_expression, n_META_OR_CONCRETE_NO_GAP_assignment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment_expression, n_META_OR_CONCRETE_NO_GAP_conditional_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_OREQ, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_XOREQ, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_ANDEQ, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_URSHIFTEQ, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_RSHIFTEQ, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_LSHIFTEQ, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_MINUSEQ, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_PLUSEQ, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_MODEQ, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_DIVEQ, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_MULTEQ, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_EQ, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_expression, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constant_expression, n_META_OR_CONCRETE_NO_GAP_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_expression_nn_or_name_fix, n_META_OR_CONCRETE_NO_GAP_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_expression_nn_or_name_fix, n_META_OR_CONCRETE_NO_GAP_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_postfix_expression_nn, n_META_OR_CONCRETE_NO_GAP_postdecrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_postfix_expression_nn, n_META_OR_CONCRETE_NO_GAP_postincrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_postfix_expression_nn, n_META_OR_CONCRETE_NO_GAP_primary));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression_nn, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression_nn, t_MINUS, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression_nn, t_PLUS, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression_nn, n_META_OR_CONCRETE_NO_GAP_predecrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression_nn, n_META_OR_CONCRETE_NO_GAP_preincrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression_not_plus_minus_nn, n_META_OR_CONCRETE_NO_GAP_cast_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression_not_plus_minus_nn, t_NOT, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression_not_plus_minus_nn, t_COMP, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_unary_expression_not_plus_minus_nn, n_META_OR_CONCRETE_NO_GAP_postfix_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multiplicative_expression_nn, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression_nn, t_MOD, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multiplicative_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_MOD, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multiplicative_expression_nn, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression_nn, t_DIV, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multiplicative_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_DIV, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multiplicative_expression_nn, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression_nn, t_MULT, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multiplicative_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_MULT, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multiplicative_expression_nn, n_META_OR_CONCRETE_NO_GAP_unary_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_additive_expression_nn, n_META_OR_CONCRETE_NO_GAP_additive_expression_nn, t_MINUS, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_additive_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_MINUS, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_additive_expression_nn, n_META_OR_CONCRETE_NO_GAP_additive_expression_nn, t_PLUS, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_additive_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_PLUS, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_additive_expression_nn, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_shift_expression_nn, n_META_OR_CONCRETE_NO_GAP_shift_expression_nn, t_GT, t_GT, t_GT, n_META_OR_CONCRETE_NO_GAP_additive_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_shift_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_GT, t_GT, t_GT, n_META_OR_CONCRETE_NO_GAP_additive_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_shift_expression_nn, n_META_OR_CONCRETE_NO_GAP_shift_expression_nn, t_GT, t_GT, n_META_OR_CONCRETE_NO_GAP_additive_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_shift_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_GT, t_GT, n_META_OR_CONCRETE_NO_GAP_additive_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_shift_expression_nn, n_META_OR_CONCRETE_NO_GAP_shift_expression_nn, t_LSHIFT, n_META_OR_CONCRETE_NO_GAP_additive_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_shift_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_LSHIFT, n_META_OR_CONCRETE_NO_GAP_additive_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_shift_expression_nn, n_META_OR_CONCRETE_NO_GAP_additive_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression_nn, n_META_OR_CONCRETE_NO_GAP_relational_expression_nn, t_GTEQ, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_GTEQ, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression_nn, n_META_OR_CONCRETE_NO_GAP_relational_expression_nn, t_LTEQ, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_LTEQ, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression_nn, n_META_OR_CONCRETE_NO_GAP_shift_expression_nn, t_GT, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_GT, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression_nn, n_META_OR_CONCRETE_NO_GAP_shift_expression_nn, t_LT, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_relational_expression_nn, n_META_OR_CONCRETE_NO_GAP_shift_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_instanceof_expression_nn, n_META_OR_CONCRETE_NO_GAP_shift_expression_nn, t_INSTANCEOF, n_META_OR_CONCRETE_NO_GAP_reference_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_instanceof_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_INSTANCEOF, n_META_OR_CONCRETE_NO_GAP_reference_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_instanceof_expression_nn, n_META_OR_CONCRETE_NO_GAP_relational_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_equality_expression_nn, n_META_OR_CONCRETE_NO_GAP_equality_expression_nn, t_NOTEQ, n_META_OR_CONCRETE_NO_GAP_instanceof_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_equality_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_NOTEQ, n_META_OR_CONCRETE_NO_GAP_instanceof_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_equality_expression_nn, n_META_OR_CONCRETE_NO_GAP_equality_expression_nn, t_EQEQ, n_META_OR_CONCRETE_NO_GAP_instanceof_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_equality_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_EQEQ, n_META_OR_CONCRETE_NO_GAP_instanceof_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_equality_expression_nn, n_META_OR_CONCRETE_NO_GAP_instanceof_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_instanceof_expression, n_META_OR_CONCRETE_NO_GAP_shift_expression, t_INSTANCEOF, n_META_OR_CONCRETE_NO_GAP_reference_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_instanceof_expression, n_META_OR_CONCRETE_NO_GAP_relational_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_and_expression_nn, n_META_OR_CONCRETE_NO_GAP_and_expression_nn, t_AND, n_META_OR_CONCRETE_NO_GAP_equality_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_and_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_AND, n_META_OR_CONCRETE_NO_GAP_equality_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_and_expression_nn, n_META_OR_CONCRETE_NO_GAP_equality_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_exclusive_or_expression_nn, n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression_nn, t_XOR, n_META_OR_CONCRETE_NO_GAP_and_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_exclusive_or_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_XOR, n_META_OR_CONCRETE_NO_GAP_and_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_exclusive_or_expression_nn, n_META_OR_CONCRETE_NO_GAP_and_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_inclusive_or_expression_nn, n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression_nn, t_OR, n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_inclusive_or_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_OR, n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_inclusive_or_expression_nn, n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_and_expression_nn, n_META_OR_CONCRETE_NO_GAP_conditional_and_expression_nn, t_ANDAND, n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_and_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_ANDAND, n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_and_expression_nn, n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_or_expression_nn, n_META_OR_CONCRETE_NO_GAP_conditional_or_expression_nn, t_OROR, n_META_OR_CONCRETE_NO_GAP_conditional_and_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_or_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_OROR, n_META_OR_CONCRETE_NO_GAP_conditional_and_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_or_expression_nn, n_META_OR_CONCRETE_NO_GAP_conditional_and_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_expression_nn, n_META_OR_CONCRETE_NO_GAP_conditional_or_expression_nn, t_QUESTION, n_META_OR_CONCRETE_NO_GAP_expression, t_COLON, n_META_OR_CONCRETE_NO_GAP_conditional_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_expression_nn, n_META_OR_CONCRETE_NO_GAP_name, t_QUESTION, n_META_OR_CONCRETE_NO_GAP_expression, t_COLON, n_META_OR_CONCRETE_NO_GAP_conditional_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_conditional_expression_nn, n_META_OR_CONCRETE_NO_GAP_conditional_or_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment_expression_nn, n_META_OR_CONCRETE_NO_GAP_assignment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_assignment_expression_nn, n_META_OR_CONCRETE_NO_GAP_conditional_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_expression_nn, n_META_OR_CONCRETE_NO_GAP_assignment_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_or_interface, n_META_OR_CONCRETE_NO_GAP_class_or_interface, n_type_arguments, t_DOT, n_META_OR_CONCRETE_NO_GAP_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_class_or_interface, n_META_OR_CONCRETE_NO_GAP_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_arguments, t_LT, n_type_argument_list, t_GT));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_wildcard, t_QUESTION, t_SUPER, n_META_OR_CONCRETE_NO_GAP_reference_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_wildcard, t_QUESTION, t_EXTENDS, n_META_OR_CONCRETE_NO_GAP_reference_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_wildcard, t_QUESTION));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_argument_list, n_type_argument_list, t_COMMA, n_META_OR_CONCRETE_type_argument));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_argument_list, n_META_OR_CONCRETE_type_argument));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_argument, n_META_OR_CONCRETE_NO_GAP_wildcard));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_argument, n_META_OR_CONCRETE_NO_GAP_reference_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_parameters, t_LT, n_type_parameter_list, t_GT));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_parameter_list, n_META_OR_CONCRETE_type_parameter));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_parameter_list, n_type_parameter_list, t_COMMA, n_META_OR_CONCRETE_type_parameter));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_parameter, n_META_SYM_IDENTIFIER, t_EXTENDS, n_type_bound_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_parameter, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_bound_list, n_type_bound_list, t_AND, n_META_OR_CONCRETE_class_or_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_type_bound_list, n_META_OR_CONCRETE_class_or_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_declaration, t_AT, t_INTERFACE, n_META_SYM_IDENTIFIER, n_annotation_type_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_declaration, n_modifiers, t_AT, t_INTERFACE, n_META_SYM_IDENTIFIER, n_annotation_type_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_body, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_body, t_LBRACE, n_annotation_type_element_declarations, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_element_declarations, n_annotation_type_element_declarations, n_META_OR_CONCRETE_annotation_type_element_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_element_declarations, n_META_OR_CONCRETE_annotation_type_element_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_element_declaration, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_element_declaration, n_META_OR_CONCRETE_NO_GAP_annotation_type_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_element_declaration, n_META_OR_CONCRETE_NO_GAP_enum_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_element_declaration, n_META_OR_CONCRETE_NO_GAP_interface_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_element_declaration, n_META_OR_CONCRETE_NO_GAP_class_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_element_declaration, n_META_OR_CONCRETE_NO_GAP_constant_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_element_declaration, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_element_declaration, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_element_declaration, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_default_value, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation_type_element_declaration, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_default_value, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_default_value, t_DEFAULT, n_META_OR_CONCRETE_NO_GAP_element_value));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation, n_META_OR_CONCRETE_NO_GAP_single_element_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation, n_META_OR_CONCRETE_NO_GAP_marker_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotation, n_META_OR_CONCRETE_NO_GAP_normal_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_normal_annotation, t_AT, n_META_OR_CONCRETE_NO_GAP_name, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_normal_annotation, t_AT, n_META_OR_CONCRETE_NO_GAP_name, t_LPAREN, n_element_value_pairs, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_element_value_pairs, n_element_value_pairs, t_COMMA, n_META_OR_CONCRETE_element_value_pair));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_element_value_pairs, n_META_OR_CONCRETE_element_value_pair));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_element_value_pair, n_META_SYM_IDENTIFIER, t_EQ, n_META_OR_CONCRETE_NO_GAP_element_value));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_element_value, n_META_OR_CONCRETE_NO_GAP_element_value_array_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_element_value, n_META_OR_CONCRETE_NO_GAP_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_element_value, n_META_OR_CONCRETE_NO_GAP_conditional_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_element_value_array_initializer, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_element_value_array_initializer, t_LBRACE, n_element_values, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_element_value_array_initializer, t_LBRACE, t_COMMA, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_element_value_array_initializer, t_LBRACE, n_element_values, t_COMMA, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_element_values, n_element_values, t_COMMA, n_META_OR_CONCRETE_element_value));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_element_values, n_META_OR_CONCRETE_element_value));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_marker_annotation, t_AT, n_META_OR_CONCRETE_NO_GAP_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_single_element_annotation, n_META_OR_CONCRETE_NO_GAP_single_element_annotation_2));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_single_element_annotation, n_META_OR_CONCRETE_NO_GAP_single_element_annotation_1));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_single_element_annotation_1, t_AT, n_META_OR_CONCRETE_NO_GAP_name, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_element_value, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_single_element_annotation_2, t_AT, n_META_OR_CONCRETE_NO_GAP_name, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_element_value, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_reference, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOUBLECOLON, t_NEW));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_reference, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOUBLECOLON, n_type_arguments, t_NEW));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_reference, n_META_OR_CONCRETE_NO_GAP_name, t_DOUBLECOLON, t_NEW));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_reference, n_META_OR_CONCRETE_NO_GAP_name, t_DOUBLECOLON, n_type_arguments, t_NEW));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_reference, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, t_DOUBLECOLON, t_NEW));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_constructor_reference, n_META_OR_CONCRETE_NO_GAP_nongeneric_array_type, t_DOUBLECOLON, t_NEW));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enhanced_for_statement, t_FOR, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_type, n_META_OR_CONCRETE_NO_GAP_enhanced_for_parameter, t_COLON, n_META_OR_CONCRETE_NO_GAP_expression, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enhanced_for_statement, t_FOR, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_OR_CONCRETE_NO_GAP_enhanced_for_parameter, t_COLON, n_META_OR_CONCRETE_NO_GAP_expression, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enhanced_for_statement_no_short_if, t_FOR, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_type, n_META_OR_CONCRETE_NO_GAP_enhanced_for_parameter, t_COLON, n_META_OR_CONCRETE_NO_GAP_expression, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enhanced_for_statement_no_short_if, t_FOR, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_OR_CONCRETE_NO_GAP_enhanced_for_parameter, t_COLON, n_META_OR_CONCRETE_NO_GAP_expression, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enhanced_for_parameter, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enhanced_for_parameter, n_META_SYM_IDENTIFIER, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_declaration, t_ENUM, n_META_SYM_IDENTIFIER, n_enum_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_declaration, n_modifiers, t_ENUM, n_META_SYM_IDENTIFIER, n_enum_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_declaration, t_ENUM, n_META_SYM_IDENTIFIER, n_interfaces, n_enum_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_declaration, n_modifiers, t_ENUM, n_META_SYM_IDENTIFIER, n_interfaces, n_enum_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_body, t_LBRACE, n_enum_constants, t_COMMA, n_enum_body_declarations, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_body, t_LBRACE, t_COMMA, n_enum_body_declarations, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_body, t_LBRACE, n_enum_constants, n_enum_body_declarations, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_body, t_LBRACE, n_enum_body_declarations, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_body, t_LBRACE, n_enum_constants, t_COMMA, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_body, t_LBRACE, t_COMMA, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_body, t_LBRACE, n_enum_constants, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_body, t_LBRACE, t_RBRACE));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_constants, n_enum_constants, t_COMMA, n_META_OR_CONCRETE_enum_constant));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_constants, n_META_OR_CONCRETE_enum_constant));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_constant, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_constant, n_annotations, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_constant, n_META_SYM_IDENTIFIER, n_arguments));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_constant, n_annotations, n_META_SYM_IDENTIFIER, n_arguments));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_constant, n_META_SYM_IDENTIFIER, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_constant, n_annotations, n_META_SYM_IDENTIFIER, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_constant, n_META_SYM_IDENTIFIER, n_arguments, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_constant, n_annotations, n_META_SYM_IDENTIFIER, n_arguments, n_class_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_arguments, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_arguments, t_LPAREN, n_argument_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotations, n_annotations, n_META_OR_CONCRETE_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_annotations, n_META_OR_CONCRETE_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_body_declarations, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_body_declarations, t_SEMICOLON, n_class_body_declarations));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_body_declarations, t_SEMICOLON, n_doc_comment_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_enum_body_declarations, t_SEMICOLON, n_class_body_declarations, n_doc_comment_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_declaration, n_META_OR_CONCRETE_NO_GAP_interface_method_header, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_declaration, n_META_OR_CONCRETE_NO_GAP_interface_method_header, n_META_OR_CONCRETE_NO_GAP_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_type_parameters, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_type_parameters, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, t_VOID, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_interface_method_header, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_LPAREN, n_formal_parameter_list, t_RPAREN, n_dims, n_throws));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_additional_bound_list, n_META_OR_CONCRETE_additional_bound));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_additional_bound_list, n_META_OR_CONCRETE_additional_bound, n_additional_bound_list));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_additional_bound, t_AND, n_META_OR_CONCRETE_NO_GAP_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, n_META_SYM_IDENTIFIER, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_SYM_IDENTIFIER, t_COMMA, n_inferred_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_ELLIPSIS, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_ELLIPSIS, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, t_ELLIPSIS, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, t_ELLIPSIS, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_ELLIPSIS, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_ELLIPSIS, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, t_ELLIPSIS, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, t_ELLIPSIS, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_ELLIPSIS, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_ELLIPSIS, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, t_ELLIPSIS, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, t_ELLIPSIS, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_ELLIPSIS, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_ELLIPSIS, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, t_ELLIPSIS, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, t_ELLIPSIS, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_META_SYM_IDENTIFIER, n_dims, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_META_SYM_IDENTIFIER, n_dims, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, n_META_SYM_IDENTIFIER, n_dims, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, n_META_SYM_IDENTIFIER, n_dims, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_META_SYM_IDENTIFIER, n_dims, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_META_SYM_IDENTIFIER, n_dims, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, n_META_SYM_IDENTIFIER, n_dims, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOT, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_dims, n_META_SYM_IDENTIFIER, n_dims, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, n_META_SYM_IDENTIFIER, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_META_SYM_IDENTIFIER, n_dims, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_META_SYM_IDENTIFIER, n_dims, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, n_META_SYM_IDENTIFIER, n_dims, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, n_META_SYM_IDENTIFIER, n_dims, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, n_META_SYM_IDENTIFIER, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_META_SYM_IDENTIFIER, n_dims, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_META_SYM_IDENTIFIER, n_dims, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, n_META_SYM_IDENTIFIER, n_dims, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_modifiers, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, n_META_SYM_IDENTIFIER, n_dims, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_nongeneric_formal_parameter, n_comma_formal_parameter_list, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_expression, t_LPAREN, n_META_OR_CONCRETE_NO_GAP_nongeneric_formal_parameter, t_RPAREN, t_RARROW, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_inferred_param_decl, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_inferred_list, n_inferred_list, t_COMMA, n_META_OR_CONCRETE_inferred_param_decl));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_inferred_list, n_META_OR_CONCRETE_inferred_param_decl));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_comma_formal_parameter_list, t_COMMA, n_formal_parameter_list_no_vararg_mixed_array));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter_list_no_vararg_mixed_array, n_formal_parameter_list_no_vararg_mixed_array, t_COMMA, n_META_OR_CONCRETE_formal_parameter_no_vararg_mixed_array));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter_list_no_vararg_mixed_array, n_META_OR_CONCRETE_formal_parameter_no_vararg_mixed_array));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter_no_vararg_mixed_array, n_META_OR_CONCRETE_NO_GAP_type, t_ELLIPSIS, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter_no_vararg_mixed_array, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, t_ELLIPSIS, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter_no_vararg_mixed_array, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter_no_vararg_mixed_array, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter_no_vararg_mixed_array, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_formal_parameter_no_vararg_mixed_array, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_body, n_META_OR_CONCRETE_NO_GAP_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_lambda_body, n_META_OR_CONCRETE_NO_GAP_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, n_META_OR_CONCRETE_NO_GAP_primary, t_DOUBLECOLON, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, n_META_OR_CONCRETE_NO_GAP_primary, t_DOUBLECOLON, n_type_arguments, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, t_SUPER, t_DOUBLECOLON, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, t_SUPER, t_DOUBLECOLON, n_type_arguments, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_SUPER, t_DOUBLECOLON, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_SUPER, t_DOUBLECOLON, n_type_arguments, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOUBLECOLON, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, t_DOUBLECOLON, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, t_DOUBLECOLON, n_type_arguments, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, n_META_OR_CONCRETE_NO_GAP_name, t_LT, n_type_argument_list, t_GT, n_dims, t_DOUBLECOLON, n_type_arguments, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, n_META_OR_CONCRETE_NO_GAP_nongeneric_array_type, t_DOUBLECOLON, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, n_META_OR_CONCRETE_NO_GAP_nongeneric_array_type, t_DOUBLECOLON, n_type_arguments, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, n_META_OR_CONCRETE_NO_GAP_name, t_DOUBLECOLON, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_method_reference, n_META_OR_CONCRETE_NO_GAP_name, t_DOUBLECOLON, n_type_arguments, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multi_catch_param, n_multi_catch_type, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multi_catch_param, n_modifiers, n_multi_catch_type, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multi_catch_param, n_multi_catch_type, n_META_SYM_IDENTIFIER, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multi_catch_param, n_modifiers, n_multi_catch_type, n_META_SYM_IDENTIFIER, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multi_catch_type, n_multi_catch_type, t_OR, n_META_OR_CONCRETE_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_multi_catch_type, n_META_OR_CONCRETE_type, t_OR, n_META_OR_CONCRETE_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_nongeneric_type, n_META_OR_CONCRETE_NO_GAP_nongeneric_reference_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_nongeneric_type, n_META_OR_CONCRETE_NO_GAP_primitive_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_nongeneric_reference_type, n_META_OR_CONCRETE_NO_GAP_nongeneric_array_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_nongeneric_reference_type, n_META_OR_CONCRETE_NO_GAP_nongeneric_class_or_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_nongeneric_class_or_interface_type, n_META_OR_CONCRETE_NO_GAP_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_nongeneric_array_type, n_META_OR_CONCRETE_NO_GAP_name, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_nongeneric_array_type, n_META_OR_CONCRETE_NO_GAP_primitive_type, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_nongeneric_formal_parameter, n_META_OR_CONCRETE_NO_GAP_nongeneric_type, t_ELLIPSIS, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_nongeneric_formal_parameter, n_modifiers, n_META_OR_CONCRETE_NO_GAP_nongeneric_type, t_ELLIPSIS, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_nongeneric_formal_parameter, n_META_OR_CONCRETE_NO_GAP_nongeneric_type, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_nongeneric_formal_parameter, n_modifiers, n_META_OR_CONCRETE_NO_GAP_nongeneric_type, n_META_SYM_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_nongeneric_formal_parameter, n_META_OR_CONCRETE_NO_GAP_nongeneric_type, n_META_SYM_IDENTIFIER, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_nongeneric_formal_parameter, n_modifiers, n_META_OR_CONCRETE_NO_GAP_nongeneric_type, n_META_SYM_IDENTIFIER, n_dims));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_single_static_import_declaration, t_IMPORT, t_STATIC, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, n_META_SYM_IDENTIFIER, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_static_import_on_demand_declaration, t_IMPORT, t_STATIC, n_META_OR_CONCRETE_NO_GAP_name, t_DOT, t_MULT, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_try_with_resource, t_TRY, t_LPAREN, n_resource_declaration_list, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_block, n_catches, n_META_OR_CONCRETE_NO_GAP_finally));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_try_with_resource, t_TRY, t_LPAREN, n_resource_declaration_list, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_block, n_META_OR_CONCRETE_NO_GAP_finally));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_try_with_resource, t_TRY, t_LPAREN, n_resource_declaration_list, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_block, n_catches));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_try_with_resource, t_TRY, t_LPAREN, n_resource_declaration_list, t_RPAREN, n_META_OR_CONCRETE_NO_GAP_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_resource_declaration_list, n_resource_declarations));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_resource_declaration_list, n_resource_declarations, t_SEMICOLON));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_resource_declarations, n_resource_declarations, t_SEMICOLON, n_META_OR_CONCRETE_resource_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_resource_declarations, n_META_OR_CONCRETE_resource_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_resource_declaration, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_EQ, n_META_OR_CONCRETE_NO_GAP_variable_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_resource_declaration, n_modifiers, n_META_OR_CONCRETE_NO_GAP_type, n_META_SYM_IDENTIFIER, t_EQ, n_META_OR_CONCRETE_NO_GAP_variable_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_abstract_method_declaration, n_abstract_method_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_abstract_method_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_abstract_method_declaration, n_META_OR_CONCRETE_NO_GAP_abstract_method_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_abstract_method_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_additional_bound, n_additional_bound));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_additional_bound, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_additional_bound, n_META_OR_CONCRETE_NO_GAP_additional_bound));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_additional_bound, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_additive_expression, n_additive_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_additive_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_additive_expression, n_META_OR_CONCRETE_NO_GAP_additive_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_additive_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_additive_expression_nn, n_additive_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_additive_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_additive_expression_nn, n_META_OR_CONCRETE_NO_GAP_additive_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_additive_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_and_expression, n_and_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_and_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_and_expression, n_META_OR_CONCRETE_NO_GAP_and_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_and_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_and_expression_nn, n_and_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_and_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_and_expression_nn, n_META_OR_CONCRETE_NO_GAP_and_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_and_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_annotation, n_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_annotation, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_annotation, n_META_OR_CONCRETE_NO_GAP_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_annotation, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_annotation_type_declaration, n_annotation_type_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_annotation_type_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_annotation_type_declaration, n_META_OR_CONCRETE_NO_GAP_annotation_type_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_annotation_type_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_annotation_type_element_declaration, n_annotation_type_element_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_annotation_type_element_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_annotation_type_element_declaration, n_META_OR_CONCRETE_NO_GAP_annotation_type_element_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_annotation_type_element_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_array_access, n_array_access));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_array_access, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_array_access, n_META_OR_CONCRETE_NO_GAP_array_access));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_array_access, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_array_creation_init, n_array_creation_init));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_array_creation_init, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_array_creation_init, n_META_OR_CONCRETE_NO_GAP_array_creation_init));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_array_creation_init, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_array_creation_uninit, n_array_creation_uninit));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_array_creation_uninit, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_array_creation_uninit, n_META_OR_CONCRETE_NO_GAP_array_creation_uninit));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_array_creation_uninit, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_array_initializer, n_array_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_array_initializer, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_array_initializer, n_META_OR_CONCRETE_NO_GAP_array_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_array_initializer, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_array_type, n_array_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_array_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_array_type, n_META_OR_CONCRETE_NO_GAP_array_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_array_type, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_assert_statement, n_assert_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_assert_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_assert_statement, n_META_OR_CONCRETE_NO_GAP_assert_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_assert_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_assignment, n_assignment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_assignment, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_assignment, n_META_OR_CONCRETE_NO_GAP_assignment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_assignment, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_assignment_expression, n_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_assignment_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_assignment_expression, n_META_OR_CONCRETE_NO_GAP_assignment_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_assignment_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_assignment_expression_nn, n_assignment_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_assignment_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_assignment_expression_nn, n_META_OR_CONCRETE_NO_GAP_assignment_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_assignment_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_block, n_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_block, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_block, n_META_OR_CONCRETE_NO_GAP_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_block, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_block_statement, n_block_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_block_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_block_statement, n_META_OR_CONCRETE_NO_GAP_block_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_block_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_body_decl_with_comment, n_body_decl_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_body_decl_with_comment, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_body_decl_with_comment, n_META_OR_CONCRETE_NO_GAP_body_decl_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_body_decl_with_comment, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_break_statement, n_break_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_break_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_break_statement, n_META_OR_CONCRETE_NO_GAP_break_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_break_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_cast_expression, n_cast_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_cast_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_cast_expression, n_META_OR_CONCRETE_NO_GAP_cast_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_cast_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_catch_clause, n_catch_clause));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_catch_clause, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_catch_clause, n_META_OR_CONCRETE_NO_GAP_catch_clause));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_catch_clause, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_body_declaration, n_class_body_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_body_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_body_declaration, n_META_OR_CONCRETE_NO_GAP_class_body_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_body_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_declaration, n_class_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_declaration, n_META_OR_CONCRETE_NO_GAP_class_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_instance_creation_expression, n_class_instance_creation_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_instance_creation_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_instance_creation_expression, n_META_OR_CONCRETE_NO_GAP_class_instance_creation_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_instance_creation_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_literal, n_class_literal));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_literal, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_literal, n_META_OR_CONCRETE_NO_GAP_class_literal));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_literal, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_member_declaration, n_class_member_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_member_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_member_declaration, n_META_OR_CONCRETE_NO_GAP_class_member_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_member_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_or_interface, n_class_or_interface));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_or_interface, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_or_interface, n_META_OR_CONCRETE_NO_GAP_class_or_interface));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_or_interface, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, n_class_or_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_or_interface_type, n_META_OR_CONCRETE_NO_GAP_class_or_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_or_interface_type, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_type, n_class_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_class_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_type, n_META_OR_CONCRETE_NO_GAP_class_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_class_type, t_GAP));
}
public static void addRules2(Grammar g) {
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_compilation_unit, n_compilation_unit));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_compilation_unit, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_compilation_unit, n_META_OR_CONCRETE_NO_GAP_compilation_unit));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_compilation_unit, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_conditional_and_expression, n_conditional_and_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_conditional_and_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_conditional_and_expression, n_META_OR_CONCRETE_NO_GAP_conditional_and_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_conditional_and_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_conditional_and_expression_nn, n_conditional_and_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_conditional_and_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_conditional_and_expression_nn, n_META_OR_CONCRETE_NO_GAP_conditional_and_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_conditional_and_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_conditional_expression, n_conditional_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_conditional_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_conditional_expression, n_META_OR_CONCRETE_NO_GAP_conditional_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_conditional_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_conditional_expression_nn, n_conditional_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_conditional_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_conditional_expression_nn, n_META_OR_CONCRETE_NO_GAP_conditional_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_conditional_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_conditional_or_expression, n_conditional_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_conditional_or_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_conditional_or_expression, n_META_OR_CONCRETE_NO_GAP_conditional_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_conditional_or_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_conditional_or_expression_nn, n_conditional_or_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_conditional_or_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_conditional_or_expression_nn, n_META_OR_CONCRETE_NO_GAP_conditional_or_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_conditional_or_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_constant_declaration, n_constant_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_constant_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_constant_declaration, n_META_OR_CONCRETE_NO_GAP_constant_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_constant_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_constant_expression, n_constant_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_constant_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_constant_expression, n_META_OR_CONCRETE_NO_GAP_constant_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_constant_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_constructor_declaration, n_constructor_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_constructor_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_constructor_declaration, n_META_OR_CONCRETE_NO_GAP_constructor_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_constructor_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_constructor_reference, n_constructor_reference));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_constructor_reference, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_constructor_reference, n_META_OR_CONCRETE_NO_GAP_constructor_reference));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_constructor_reference, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_continue_statement, n_continue_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_continue_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_continue_statement, n_META_OR_CONCRETE_NO_GAP_continue_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_continue_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_default_value, n_default_value));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_default_value, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_default_value, n_META_OR_CONCRETE_NO_GAP_default_value));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_default_value, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_dim_expr, n_dim_expr));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_dim_expr, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_dim_expr, n_META_OR_CONCRETE_NO_GAP_dim_expr));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_dim_expr, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_do_statement, n_do_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_do_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_do_statement, n_META_OR_CONCRETE_NO_GAP_do_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_do_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_element_value, n_element_value));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_element_value, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_element_value, n_META_OR_CONCRETE_NO_GAP_element_value));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_element_value, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_element_value_array_initializer, n_element_value_array_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_element_value_array_initializer, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_element_value_array_initializer, n_META_OR_CONCRETE_NO_GAP_element_value_array_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_element_value_array_initializer, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_element_value_pair, n_element_value_pair));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_element_value_pair, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_element_value_pair, n_META_OR_CONCRETE_NO_GAP_element_value_pair));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_element_value_pair, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_empty_statement, n_empty_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_empty_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_empty_statement, n_META_OR_CONCRETE_NO_GAP_empty_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_empty_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_enhanced_for_parameter, n_enhanced_for_parameter));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_enhanced_for_parameter, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_enhanced_for_parameter, n_META_OR_CONCRETE_NO_GAP_enhanced_for_parameter));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_enhanced_for_parameter, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_enhanced_for_statement, n_enhanced_for_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_enhanced_for_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_enhanced_for_statement, n_META_OR_CONCRETE_NO_GAP_enhanced_for_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_enhanced_for_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_enhanced_for_statement_no_short_if, n_enhanced_for_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_enhanced_for_statement_no_short_if, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_enhanced_for_statement_no_short_if, n_META_OR_CONCRETE_NO_GAP_enhanced_for_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_enhanced_for_statement_no_short_if, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_enum_constant, n_enum_constant));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_enum_constant, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_enum_constant, n_META_OR_CONCRETE_NO_GAP_enum_constant));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_enum_constant, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_enum_declaration, n_enum_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_enum_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_enum_declaration, n_META_OR_CONCRETE_NO_GAP_enum_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_enum_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_equality_expression, n_equality_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_equality_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_equality_expression, n_META_OR_CONCRETE_NO_GAP_equality_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_equality_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_equality_expression_nn, n_equality_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_equality_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_equality_expression_nn, n_META_OR_CONCRETE_NO_GAP_equality_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_equality_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression, n_exclusive_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_exclusive_or_expression, n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_exclusive_or_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression_nn, n_exclusive_or_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_exclusive_or_expression_nn, n_META_OR_CONCRETE_NO_GAP_exclusive_or_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_exclusive_or_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, n_explicit_constructor_invocation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_explicit_constructor_invocation, n_META_OR_CONCRETE_NO_GAP_explicit_constructor_invocation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_explicit_constructor_invocation, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_expression, n_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_expression, n_META_OR_CONCRETE_NO_GAP_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_expression_nn, n_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_expression_nn, n_META_OR_CONCRETE_NO_GAP_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_expression_nn_or_name_fix, n_expression_nn_or_name_fix));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_expression_nn_or_name_fix, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_expression_nn_or_name_fix, n_META_OR_CONCRETE_NO_GAP_expression_nn_or_name_fix));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_expression_nn_or_name_fix, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_expression_statement, n_expression_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_expression_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_expression_statement, n_META_OR_CONCRETE_NO_GAP_expression_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_expression_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_field_access, n_field_access));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_field_access, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_field_access, n_META_OR_CONCRETE_NO_GAP_field_access));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_field_access, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_field_declaration, n_field_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_field_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_field_declaration, n_META_OR_CONCRETE_NO_GAP_field_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_field_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_field_declarator, n_field_declarator));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_field_declarator, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_field_declarator, n_META_OR_CONCRETE_NO_GAP_field_declarator));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_field_declarator, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_field_declarator_id, n_field_declarator_id));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_field_declarator_id, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_field_declarator_id, n_META_OR_CONCRETE_NO_GAP_field_declarator_id));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_field_declarator_id, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_finally, n_finally));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_finally, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_finally, n_META_OR_CONCRETE_NO_GAP_finally));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_finally, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_floating_point_type, n_floating_point_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_floating_point_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_floating_point_type, n_META_OR_CONCRETE_NO_GAP_floating_point_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_floating_point_type, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_for_statement, n_for_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_for_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_for_statement, n_META_OR_CONCRETE_NO_GAP_for_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_for_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_for_statement_no_short_if, n_for_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_for_statement_no_short_if, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_for_statement_no_short_if, n_META_OR_CONCRETE_NO_GAP_for_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_for_statement_no_short_if, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_formal_parameter, n_formal_parameter));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_formal_parameter, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_formal_parameter, n_META_OR_CONCRETE_NO_GAP_formal_parameter));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_formal_parameter, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_formal_parameter_no_vararg_mixed_array, n_formal_parameter_no_vararg_mixed_array));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_formal_parameter_no_vararg_mixed_array, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_formal_parameter_no_vararg_mixed_array, n_META_OR_CONCRETE_NO_GAP_formal_parameter_no_vararg_mixed_array));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_formal_parameter_no_vararg_mixed_array, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_if_then_else_statement, n_if_then_else_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_if_then_else_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_if_then_else_statement, n_META_OR_CONCRETE_NO_GAP_if_then_else_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_if_then_else_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_if_then_else_statement_no_short_if, n_if_then_else_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_if_then_else_statement_no_short_if, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_if_then_else_statement_no_short_if, n_META_OR_CONCRETE_NO_GAP_if_then_else_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_if_then_else_statement_no_short_if, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_if_then_statement, n_if_then_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_if_then_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_if_then_statement, n_META_OR_CONCRETE_NO_GAP_if_then_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_if_then_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_import_declaration, n_import_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_import_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_import_declaration, n_META_OR_CONCRETE_NO_GAP_import_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_import_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_import_with_comment, n_import_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_import_with_comment, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_import_with_comment, n_META_OR_CONCRETE_NO_GAP_import_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_import_with_comment, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression, n_inclusive_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_inclusive_or_expression, n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_inclusive_or_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression_nn, n_inclusive_or_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_inclusive_or_expression_nn, n_META_OR_CONCRETE_NO_GAP_inclusive_or_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_inclusive_or_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_inferred_param_decl, n_inferred_param_decl));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_inferred_param_decl, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_inferred_param_decl, n_META_OR_CONCRETE_NO_GAP_inferred_param_decl));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_inferred_param_decl, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_instance_initializer, n_instance_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_instance_initializer, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_instance_initializer, n_META_OR_CONCRETE_NO_GAP_instance_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_instance_initializer, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_instanceof_expression, n_instanceof_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_instanceof_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_instanceof_expression, n_META_OR_CONCRETE_NO_GAP_instanceof_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_instanceof_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_instanceof_expression_nn, n_instanceof_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_instanceof_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_instanceof_expression_nn, n_META_OR_CONCRETE_NO_GAP_instanceof_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_instanceof_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_integral_type, n_integral_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_integral_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_integral_type, n_META_OR_CONCRETE_NO_GAP_integral_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_integral_type, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_interface_declaration, n_interface_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_interface_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_interface_declaration, n_META_OR_CONCRETE_NO_GAP_interface_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_interface_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_interface_member_declaration, n_interface_member_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_interface_member_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_interface_member_declaration, n_META_OR_CONCRETE_NO_GAP_interface_member_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_interface_member_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_interface_member_with_comment, n_interface_member_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_interface_member_with_comment, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_interface_member_with_comment, n_META_OR_CONCRETE_NO_GAP_interface_member_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_interface_member_with_comment, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_interface_method_declaration, n_interface_method_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_interface_method_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_interface_method_declaration, n_META_OR_CONCRETE_NO_GAP_interface_method_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_interface_method_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_interface_method_header, n_interface_method_header));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_interface_method_header, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_interface_method_header, n_META_OR_CONCRETE_NO_GAP_interface_method_header));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_interface_method_header, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_interface_type, n_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_interface_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_interface_type, n_META_OR_CONCRETE_NO_GAP_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_interface_type, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_labeled_statement, n_labeled_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_labeled_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_labeled_statement, n_META_OR_CONCRETE_NO_GAP_labeled_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_labeled_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_labeled_statement_no_short_if, n_labeled_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_labeled_statement_no_short_if, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_labeled_statement_no_short_if, n_META_OR_CONCRETE_NO_GAP_labeled_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_labeled_statement_no_short_if, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_lambda_body, n_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_lambda_body, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_lambda_body, n_META_OR_CONCRETE_NO_GAP_lambda_body));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_lambda_body, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_lambda_expression, n_lambda_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_lambda_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_lambda_expression, n_META_OR_CONCRETE_NO_GAP_lambda_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_lambda_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_literal, n_literal));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_literal, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_literal, n_META_OR_CONCRETE_NO_GAP_literal));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_literal, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_local_variable_declaration, n_local_variable_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_local_variable_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_local_variable_declaration, n_META_OR_CONCRETE_NO_GAP_local_variable_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_local_variable_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_local_variable_declaration_statement, n_local_variable_declaration_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_local_variable_declaration_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_local_variable_declaration_statement, n_META_OR_CONCRETE_NO_GAP_local_variable_declaration_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_local_variable_declaration_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_marker_annotation, n_marker_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_marker_annotation, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_marker_annotation, n_META_OR_CONCRETE_NO_GAP_marker_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_marker_annotation, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_method_declaration, n_method_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_method_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_method_declaration, n_META_OR_CONCRETE_NO_GAP_method_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_method_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_method_header, n_method_header));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_method_header, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_method_header, n_META_OR_CONCRETE_NO_GAP_method_header));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_method_header, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_method_invocation, n_method_invocation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_method_invocation, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_method_invocation, n_META_OR_CONCRETE_NO_GAP_method_invocation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_method_invocation, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_method_reference, n_method_reference));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_method_reference, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_method_reference, n_META_OR_CONCRETE_NO_GAP_method_reference));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_method_reference, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_modifier, n_modifier));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_modifier, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_modifier, n_META_OR_CONCRETE_NO_GAP_modifier));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_modifier, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_multi_catch_param, n_multi_catch_param));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_multi_catch_param, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_multi_catch_param, n_META_OR_CONCRETE_NO_GAP_multi_catch_param));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_multi_catch_param, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression, n_multiplicative_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_multiplicative_expression, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_multiplicative_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression_nn, n_multiplicative_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_multiplicative_expression_nn, n_META_OR_CONCRETE_NO_GAP_multiplicative_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_multiplicative_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_name, n_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_name, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_name, n_META_OR_CONCRETE_NO_GAP_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_name, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_name_decl, n_name_decl));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_name_decl, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_name_decl, n_META_OR_CONCRETE_NO_GAP_name_decl));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_name_decl, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_nongeneric_array_type, n_nongeneric_array_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_nongeneric_array_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_nongeneric_array_type, n_META_OR_CONCRETE_NO_GAP_nongeneric_array_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_nongeneric_array_type, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_nongeneric_class_or_interface_type, n_nongeneric_class_or_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_nongeneric_class_or_interface_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_nongeneric_class_or_interface_type, n_META_OR_CONCRETE_NO_GAP_nongeneric_class_or_interface_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_nongeneric_class_or_interface_type, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_nongeneric_formal_parameter, n_nongeneric_formal_parameter));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_nongeneric_formal_parameter, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_nongeneric_formal_parameter, n_META_OR_CONCRETE_NO_GAP_nongeneric_formal_parameter));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_nongeneric_formal_parameter, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_nongeneric_reference_type, n_nongeneric_reference_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_nongeneric_reference_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_nongeneric_reference_type, n_META_OR_CONCRETE_NO_GAP_nongeneric_reference_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_nongeneric_reference_type, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_nongeneric_type, n_nongeneric_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_nongeneric_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_nongeneric_type, n_META_OR_CONCRETE_NO_GAP_nongeneric_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_nongeneric_type, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_normal_annotation, n_normal_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_normal_annotation, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_normal_annotation, n_META_OR_CONCRETE_NO_GAP_normal_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_normal_annotation, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_numeric_type, n_numeric_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_numeric_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_numeric_type, n_META_OR_CONCRETE_NO_GAP_numeric_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_numeric_type, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_package_declaration, n_package_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_package_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_package_declaration, n_META_OR_CONCRETE_NO_GAP_package_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_package_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_package_with_comment, n_package_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_package_with_comment, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_package_with_comment, n_META_OR_CONCRETE_NO_GAP_package_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_package_with_comment, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_postdecrement_expression, n_postdecrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_postdecrement_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_postdecrement_expression, n_META_OR_CONCRETE_NO_GAP_postdecrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_postdecrement_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_postfix_expression, n_postfix_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_postfix_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_postfix_expression, n_META_OR_CONCRETE_NO_GAP_postfix_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_postfix_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_postfix_expression_nn, n_postfix_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_postfix_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_postfix_expression_nn, n_META_OR_CONCRETE_NO_GAP_postfix_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_postfix_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_postincrement_expression, n_postincrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_postincrement_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_postincrement_expression, n_META_OR_CONCRETE_NO_GAP_postincrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_postincrement_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_predecrement_expression, n_predecrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_predecrement_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_predecrement_expression, n_META_OR_CONCRETE_NO_GAP_predecrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_predecrement_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_preincrement_expression, n_preincrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_preincrement_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_preincrement_expression, n_META_OR_CONCRETE_NO_GAP_preincrement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_preincrement_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_primary, n_primary));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_primary, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_primary, n_META_OR_CONCRETE_NO_GAP_primary));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_primary, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_primary_no_new_array, n_primary_no_new_array));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_primary_no_new_array, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_primary_no_new_array, n_META_OR_CONCRETE_NO_GAP_primary_no_new_array));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_primary_no_new_array, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_primitive_type, n_primitive_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_primitive_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_primitive_type, n_META_OR_CONCRETE_NO_GAP_primitive_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_primitive_type, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_qualified_name, n_qualified_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_qualified_name, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_qualified_name, n_META_OR_CONCRETE_NO_GAP_qualified_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_qualified_name, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_qualified_name_decl, n_qualified_name_decl));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_qualified_name_decl, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_qualified_name_decl, n_META_OR_CONCRETE_NO_GAP_qualified_name_decl));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_qualified_name_decl, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_reference_type, n_reference_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_reference_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_reference_type, n_META_OR_CONCRETE_NO_GAP_reference_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_reference_type, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_relational_expression, n_relational_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_relational_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_relational_expression, n_META_OR_CONCRETE_NO_GAP_relational_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_relational_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_relational_expression_nn, n_relational_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_relational_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_relational_expression_nn, n_META_OR_CONCRETE_NO_GAP_relational_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_relational_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_resource_declaration, n_resource_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_resource_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_resource_declaration, n_META_OR_CONCRETE_NO_GAP_resource_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_resource_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_return_statement, n_return_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_return_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_return_statement, n_META_OR_CONCRETE_NO_GAP_return_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_return_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_shift_expression, n_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_shift_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_shift_expression, n_META_OR_CONCRETE_NO_GAP_shift_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_shift_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_shift_expression_nn, n_shift_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_shift_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_shift_expression_nn, n_META_OR_CONCRETE_NO_GAP_shift_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_shift_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_simple_name, n_simple_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_simple_name, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_simple_name, n_META_OR_CONCRETE_NO_GAP_simple_name));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_simple_name, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_simple_name_decl, n_simple_name_decl));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_simple_name_decl, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_simple_name_decl, n_META_OR_CONCRETE_NO_GAP_simple_name_decl));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_simple_name_decl, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_single_element_annotation, n_single_element_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_single_element_annotation, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_single_element_annotation, n_META_OR_CONCRETE_NO_GAP_single_element_annotation));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_single_element_annotation, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_single_element_annotation_1, n_single_element_annotation_1));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_single_element_annotation_1, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_single_element_annotation_1, n_META_OR_CONCRETE_NO_GAP_single_element_annotation_1));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_single_element_annotation_1, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_single_element_annotation_2, n_single_element_annotation_2));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_single_element_annotation_2, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_single_element_annotation_2, n_META_OR_CONCRETE_NO_GAP_single_element_annotation_2));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_single_element_annotation_2, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_single_static_import_declaration, n_single_static_import_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_single_static_import_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_single_static_import_declaration, n_META_OR_CONCRETE_NO_GAP_single_static_import_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_single_static_import_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_single_type_import_declaration, n_single_type_import_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_single_type_import_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_single_type_import_declaration, n_META_OR_CONCRETE_NO_GAP_single_type_import_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_single_type_import_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_statement, n_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_statement, n_META_OR_CONCRETE_NO_GAP_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_statement_expression, n_statement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_statement_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_statement_expression, n_META_OR_CONCRETE_NO_GAP_statement_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_statement_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if, n_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_statement_no_short_if, n_META_OR_CONCRETE_NO_GAP_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_statement_no_short_if, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_statement_without_trailing_substatement, n_statement_without_trailing_substatement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_statement_without_trailing_substatement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_statement_without_trailing_substatement, n_META_OR_CONCRETE_NO_GAP_statement_without_trailing_substatement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_statement_without_trailing_substatement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_static_import_on_demand_declaration, n_static_import_on_demand_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_static_import_on_demand_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_static_import_on_demand_declaration, n_META_OR_CONCRETE_NO_GAP_static_import_on_demand_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_static_import_on_demand_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_static_initializer, n_static_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_static_initializer, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_static_initializer, n_META_OR_CONCRETE_NO_GAP_static_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_static_initializer, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_super, n_super));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_super, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_super, n_META_OR_CONCRETE_NO_GAP_super));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_super, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_switch_block, n_switch_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_switch_block, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_switch_block, n_META_OR_CONCRETE_NO_GAP_switch_block));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_switch_block, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_switch_label, n_switch_label));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_switch_label, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_switch_label, n_META_OR_CONCRETE_NO_GAP_switch_label));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_switch_label, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_switch_statement, n_switch_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_switch_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_switch_statement, n_META_OR_CONCRETE_NO_GAP_switch_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_switch_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_synchronized_statement, n_synchronized_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_synchronized_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_synchronized_statement, n_META_OR_CONCRETE_NO_GAP_synchronized_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_synchronized_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_throw_statement, n_throw_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_throw_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_throw_statement, n_META_OR_CONCRETE_NO_GAP_throw_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_throw_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_try_statement, n_try_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_try_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_try_statement, n_META_OR_CONCRETE_NO_GAP_try_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_try_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_try_with_resource, n_try_with_resource));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_try_with_resource, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_try_with_resource, n_META_OR_CONCRETE_NO_GAP_try_with_resource));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_try_with_resource, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_type, n_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_type, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_type, n_META_OR_CONCRETE_NO_GAP_type));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_type, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_type_argument, n_type_argument));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_type_argument, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_type_argument, n_META_OR_CONCRETE_NO_GAP_type_argument));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_type_argument, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_type_declaration, n_type_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_type_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_type_declaration, n_META_OR_CONCRETE_NO_GAP_type_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_type_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_type_import_on_demand_declaration, n_type_import_on_demand_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_type_import_on_demand_declaration, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_type_import_on_demand_declaration, n_META_OR_CONCRETE_NO_GAP_type_import_on_demand_declaration));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_type_import_on_demand_declaration, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_type_parameter, n_type_parameter));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_type_parameter, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_type_parameter, n_META_OR_CONCRETE_NO_GAP_type_parameter));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_type_parameter, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_type_with_comment, n_type_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_type_with_comment, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_type_with_comment, n_META_OR_CONCRETE_NO_GAP_type_with_comment));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_type_with_comment, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_unary_expression, n_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_unary_expression, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_unary_expression, n_META_OR_CONCRETE_NO_GAP_unary_expression));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_unary_expression, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_unary_expression_nn, n_unary_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_unary_expression_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_unary_expression_nn, n_META_OR_CONCRETE_NO_GAP_unary_expression_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_unary_expression_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus, n_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_unary_expression_not_plus_minus, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_unary_expression_not_plus_minus, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus_nn, n_unary_expression_not_plus_minus_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus_nn, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_unary_expression_not_plus_minus_nn, n_META_OR_CONCRETE_NO_GAP_unary_expression_not_plus_minus_nn));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_unary_expression_not_plus_minus_nn, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_variable_declarator, n_variable_declarator));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_variable_declarator, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_variable_declarator, n_META_OR_CONCRETE_NO_GAP_variable_declarator));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_variable_declarator, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_variable_declarator_id, n_variable_declarator_id));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_variable_declarator_id, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_variable_declarator_id, n_META_OR_CONCRETE_NO_GAP_variable_declarator_id));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_variable_declarator_id, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_variable_initializer, n_variable_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_variable_initializer, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_variable_initializer, n_META_OR_CONCRETE_NO_GAP_variable_initializer));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_variable_initializer, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_while_statement, n_while_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_while_statement, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_while_statement, n_META_OR_CONCRETE_NO_GAP_while_statement));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_while_statement, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_while_statement_no_short_if, n_while_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_while_statement_no_short_if, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_while_statement_no_short_if, n_META_OR_CONCRETE_NO_GAP_while_statement_no_short_if));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_while_statement_no_short_if, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_wildcard, n_wildcard));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_NO_GAP_wildcard, t_METAVARID));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_wildcard, n_META_OR_CONCRETE_NO_GAP_wildcard));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_OR_CONCRETE_wildcard, t_GAP));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_SYM_IDENTIFIER, t_IDENTIFIER));
g.addRule(new se.lth.sep.Rule(SemanticAction.NULL, n_META_SYM_IDENTIFIER, t_METAVARID));
}
private Java8Grammar() {
}
static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
}
